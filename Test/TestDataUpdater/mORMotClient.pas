/// remote access to a mORMot server using SynCrossPlatform* units
// - retrieved from http://localhost:89/DC/wrapper/CrossPlatform/mORMotClient.pas
// at 2021-12-02 10:56:42 using "CrossPlatform.pas.mustache" template
unit mORMotClient;

{
  WARNING:
    This unit has been generated by a mORMot 1.18.5406 server.
    Any manual modification of this file may be lost after regeneration.

  Synopse mORMot framework. Copyright (C) 2021 Arnaud Bouchez
    Synopse Informatique - http://synopse.info

  This unit is released under a MPL/GPL/LGPL tri-license,
  and therefore may be freely included in any application.

  This unit would work on Delphi 6 and later, under all supported platforms
  (including MacOSX, and NextGen iPhone/iPad), and the Free Pascal Compiler.
}

interface

uses
  SynCrossPlatformJSON,
  SynCrossPlatformSpecific,
  SynCrossPlatformREST;
  

type // define some enumeration types, used below
  TSQLHistoryEvent = (heAdd, heUpdate, heDelete, heArchiveBlob);
  TDCTagShiftKind = (tskAbsolute, tskBeginDay, tskBeginWeek, tskBeginMonth, tskBeginYear, tskMoment);
  TDCTagWriteKind = (dlwkNone, dlwkOnCurrentMoment, dlwkOnFuture, dlwkOnMoment);
  TMonitoringSensorKind = (Analog, Discrete, CounterUp, CounterDown);
  TDCTagUseInReport = (uirNone, uirSum, uirAverage, uirCount, uirMin, uirMax, uirGroupBy, uirNoReport);
  TDCTagUseInTrack = (uitNone, uitSum, uitAverage, uitCount, uitMin, uitMax, uitNoTrack);
  TClientStatus = (cliUndefined, cliIsActive, cliIsDisabled, cliIsOutOfService);
  TSCSObjectKind = (Unknown, Moving);
  TSCSObjectIcon = (Group, TractorMTZ, TractorMosey, CombineGrain, CombineTomato, Avto1, Avto2, FuraSandora, AvtoGood, Duckato, Daf, Benzo, Avto3, Field, Pump, Fura1, Avto4, Avto5, AvtoBest, Fura2, Avto6, Dodge, Human);
  TGPSTrackerType = (trtUndefined, trtTDC, trtTeltonika, trtRoadKey, trtGlobalSat, trtAndroid, trtCicada, trtWialonIPS, trtBCE);
  TGPSTraсkerStatus = (trsUndefined, trsIsActive, trsIsFrozen, trsIsDisconnected, trsIsOutOfService);
  TSimCardStatus = (simUndefined, simIsActive, simIsNotActive, simIsOutOfService, simIsBroken);
  TSystemTypes = (stVirtual, stOPC, stVigo, stPLMS, stModBus, stModBus_NRG, stEnergy, stWeight, stJumo, stRefractometer, stGPRS, stTeltonika, stSNMP, stMetos, stUserData, stGS, stFlowinec, stGPS, stCSVFile, stWIN, stICPDAS, stRPM, stOWEN, stSimpleTracker, stADODB, stModBusTCP, stDC, stColorFlex, stRX5000, stTitrinoPlus848, stZeosDB, stZeos, stRoadKey, stStorozh, stOpenWeatherMap, stCICADA, stXWayTCP, stSERCOM, stAEDTCP, stWialonIPS, stModbusInterception, stRPN, stLinkedGPRS, stColorFlexHID, stBCE);
  TMonitoringDataWriteKind = (mdwkNone, mdwkAverage, mdwkMedian, mdwkMin, mdwkMax, mdwkMeanSquare);
  TMonitoringSmoothKind = (mskNone, mskMovingMean, mskMedian, mskMin, mskMax, mskMedianMovingMean);
  TMonitoringRefValueKind = (mrvExact, mrvLeft, mrvRight);
  TRefValueFormat = (rvfString, rvfHEX, rvfDEC);
  TOVTRecStatus = (Visited, NotVisited, NotAtTheRoute);
  TTrackerOperation = (Add, Update, Delete);

type // define some set types, used below
  TPermissionSet = set of(peRead, peWrite, peCreate, peDelete, peExecute, peAdmin);
  TDCStairsOptionsSet = set of(soIncrease, soDecrease);

type // define some record types, used as properties below
  TSCSProjectParams = record
    ProjectName: String;
    ExtFL: Boolean;
    ExtFL1: Boolean;
    ExtFL2: Boolean;
    ExtTime: Boolean;
    ExtTimeFromLastReceive: Boolean;
    ExtExternalVoltage: Boolean;
    ExtNoConnectionTimeCounter300: Boolean;
  end;

  TSensorValueDTO = record
    ID: String;
    Value: Double;
    ValueStr: String;
    Moment: TDateTime;
    Error: Integer;
    ErrorMsg: String;
  end;

  TSensorHistoryRec = record
    Moment: TDateTime;
    Value: String;
    Error: String;
  end;

  TDataRec = record
    t: Int64;
    v: String;
  end;

  TDataRecExt = record
    SID: String;
    t: Int64;
    v: String;
    e: String;
  end;

  THistoryRec = record
    t: Int64;
    v: String;
  end;

  THistoryRecExt = record
    t: Int64;
    v: String;
    e: String;
  end;

  TTrackerParams = record
    ID: String;
    Name: String;
    LatID: String;
    LonID: String;
    SpeedID: String;
    DistanceID: String;
    FuelLevelID: String;
    FuelFlowID: String;
    IgnitionID: String;
    MinFuelDrainToRep: Double;
    MinRefuelingToRep: Double;
    CalcStopExpr: String;
  end;

  TRepTableParams = record
    Date1: TDateTime;
    Date2: TDateTime;
    Tracker: TTrackerParams;
    GroupeByState: Boolean;
    DetailState: Boolean;
    DetailDay: Boolean;
    DetailHour: Boolean;
    IgnoreStateSeconds: Integer;
  end;

  TOVRParams = record
    TrackerSID: String;
    Date1: TDateTime;
    Date2: TDateTime;
    MinDistance: Integer;
    MinDuration: Integer;
  end;

  TOVRRec = record
    Tracker: String;
    Route: String;
    Outlet: String;
    TimeFrom: TDateTime;
    TimeTo: TDateTime;
    Duration: Integer;
    Distance: Integer;
    Status: TOVTRecStatus;
    PlanIndex: Integer;
    FactIndex: Integer;
  end;

  TIntervalParams = record
    Date1: TDateTime;
    Date2: TDateTime;
  end;

  TSCSTrackerActivityRec = record
    ID: TID;
    Title: String;
    Login: String;
    Phone: String;
    MonitoringID: Integer;
    MonitotingSID: String;
    MonitoringTitle: String;
    Status: String;
    Activity: Double;
    LastConnectAt: TDateTime;
  end;

  TSCSClientActivityRec = record
    ID: TID;
    Title: String;
    Login: String;
    MonitoringID: Integer;
    MonitotingSID: String;
    MonitoringTitle: String;
    Status: String;
    Activity: Double;
    LastConnectAt: TDateTime;
    Detail: array of TSCSTrackerActivityRec;
  end;

  TBillingUserDTO = record
    ID: Integer;
    LogonName: String;
    DisplayName: String;
  end;

  TBillingClientDTO = record
    ID: Integer;
    Title: String;
    SID: String;
    Login: String;
    Status: TClientStatus;
  end;

  TBillingTrackerDTO = record
    ID: Integer;
    SID: String;
    Title: String;
    ClientID: Integer;
    Phone: String;
    Status: TGPSTraсkerStatus;
  end;

  TBillingTrackerStatusDTO = record
    Moment: TDateTime;
    Status: TGPSTraсkerStatus;
    DocInfo: String;
  end;

  TBillingSIMCardDTO = record
    Phone: String;
    ICC: String;
    MobileOperator: String;
    IsAvailableToManage: Boolean;
    Status: TSimCardStatus;
  end;

  TAddTrackerParamsDTO = record
    FTrackerSID: String;
    Operation: TTrackerOperation;
    ClientName: String;
    ClientSID: String;
    TrackerName: String;
    TrackerType: TGPSTrackerType;
    TrackerModel: String;
    TrackerLogin: String;
    GPS: Boolean;
    Ignition: Boolean;
    CAN300: Boolean;
    FLCount: Integer;
    DistanceTO: Boolean;
    DistanceTrip: Boolean;
    Location: Boolean;
    LocationFileName: String;
  end;

  TTraccarUser = record
    id: Integer;
    name: String;
    email: String;
    readonly: Boolean;
    admin: Boolean;
    map: String;
    distanceUnit: String;
    speedUnit: String;
    latitude: Double;
    longitude: Double;
    zoom: Integer;
    password: String;
    twelveHourFormat: Boolean;
    coordinateFormat: String;
    disabled: Boolean;
    expirationTime: TDateTime;
    deviceLimit: Integer;
    userLimit: Integer;
    deviceReadonly: Boolean;
    token: String;
  end;

  TDCSessionRec = record
    ID: Integer;
    UserName: String;
    RemoteIP: String;
    CreateTime: TDateTime;
    Client: String;
  end;

  TTruckingClientDTO = record
    Title: String;
    Info: String;
  end;

  TTruckingTrackerDTO = record
    Title: String;
    TrackerType: TGPSTrackerType;
    TrackerModel: String;
    TrackerLogin: String;
  end;

  TLocationAddrRec = record
    LatID: String;
    LonID: String;
  end;

  TLocationValueRec = record
    Lat: Double;
    Lon: Double;
    Status: String;
  end;

  TClientDTO = record
    ID: TID;
    Title: String;
  end;

  TUnitDTO = record
    ID: TID;
    Title: String;
    Symbol: String;
    ParentID: TID;
  end;

  TGroupDTO = record
    ID: TID;
    Title: String;
    ParentID: TID;
  end;

  TLocationDTO = record
    Lat: Double;
    Lon: Double;
    Speed: Double;
    Status: String;
  end;

  TLARecordRefRec = record
    TableName: String;
    TableIndex: Integer;
    RecordID: TID;
    RecordTitle: String;
  end;

type // define some dynamic array types, used as properties below
  TIDs = array of RawUTF8;
  TSensorDataDTA = array of TSensorValueDTO;
  TDoubleDynArray = array of Int64;
  TSensorHistoryArray = array of TSensorHistoryRec;
  TSIDArr = array of RawUTF8;
  TValArr = array of RawUTF8;
  TDataRecArr = array of TDataRec;
  TDataRecExtArr = array of TDataRecExt;
  TIDArr = array of Int64;
  THistoryRecArr = array of THistoryRec;
  THistoryRecExtArr = array of THistoryRecExt;
  TIntegerDynArray = array of Integer;
  TSCSTrackWorkArr = array of TSCSTrackWorkRec;
  TSCSStopArr = array of TSCSStopRec;
  TOVRResult = array of TOVRRec;
  TSCSTrackLine = array of TSCSLatLonRec;
  TSCSClientActivityArr = array of TSCSClientActivityRec;
  TBillingUsersDTO = array of TBillingUserDTO;
  TBillingClientsDTO = array of TBillingClientDTO;
  TBillingTrackersDTO = array of TBillingTrackerDTO;
  TBillingTrackerStatusHistoryDTO = array of TBillingTrackerStatusDTO;
  TBillingSIMCardsDTO = array of TBillingSIMCardDTO;
  TDCSessionArr = array of TDCSessionRec;
  TTrackerIDs = array of Int64;
  TLocationAddrs = array of TLocationAddrRec;
  TLocationValues = array of TLocationValueRec;
  TClientsArr = array of TClientDTO;
  TUnitArr = array of TUnitDTO;
  TGroupArr = array of TGroupDTO;
  TIDDynArray = array of Int64;
  TLocationsArr = array of TLocationDTO;
  TRawUTF8DynArray = array of RawUTF8;
  TLARecordRefArr = array of TLARecordRefRec;


type
  /// map "DCRecordHistory" table
  TSQLDCRecordHistory = class(TSQLRecord)
  protected
    fModifiedRecord: TID; 
    fTimestamp: TModTime; 
    fEvent: TSQLHistoryEvent; 
    fSentDataJSON: String; 
    fHistory: TSQLRawBlob; 
    fRecID: TID; 
    fTableName: String; 
    fLogonName: String; 
  published
    property ModifiedRecord: TID read fModifiedRecord write fModifiedRecord;
    property Timestamp: TModTime read fTimestamp write fTimestamp;
    property Event: TSQLHistoryEvent read fEvent write fEvent;
    property SentDataJSON: String index 4000 read fSentDataJSON write fSentDataJSON;
    property History: TSQLRawBlob read fHistory write fHistory;
    property RecID: TID read fRecID write fRecID;
    property TableName: String index 50 read fTableName write fTableName;
    property LogonName: String index 50 read fLogonName write fLogonName;
  end;
  
  /// map "TableDeleted" table
  TSQLRecordTableDeleted = class(TSQLRecord)
  protected
    fDeleted: Int64; 
  published
    property Deleted: Int64 read fDeleted write fDeleted;
  end;
  
  /// map "DCInfo" table
  TSQLDCInfo = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fDescription: String; 
    fLanguage: String; 
    fCopyright: String; 
    fAbout: String; 
    fDBVer: Integer; 
    fDCConnection: TID; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String index 80 read fTitle write fTitle;
    property Description: String index 120 read fDescription write fDescription;
    property Language: String index 3 read fLanguage write fLanguage;
    property Copyright: String index 80 read fCopyright write fCopyright;
    property About: String read fAbout write fAbout;
    property DBVer: Integer read fDBVer write fDBVer;
    // defined as DCConnection: TSQLDCConnection on the server
    property DCConnection: TID read fDCConnection write fDCConnection;
  end;
  
  /// map "DCModel" table
  TSQLDCModel = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fTableName: String; 
    fTableIndex: Integer; 
    fDescription: String; 
    fUpdateTime: TDateTime; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property TableName: String read fTableName write fTableName;
    property TableIndex: Integer read fTableIndex write fTableIndex;
    property Description: String read fDescription write fDescription;
    property UpdateTime: TDateTime read fUpdateTime write fUpdateTime;
  end;
  
  /// map "DCStorage" table
  TSQLDCStorage = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fIdent: String; 
    fVerNo: Integer; 
    fData: TSQLRawBlob; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Ident: String index 255 read fIdent write fIdent stored AS_UNIQUE;
    property VerNo: Integer read fVerNo write fVerNo;
    property Data: TSQLRawBlob read fData write fData;
  end;
  
  /// map "DCAuthUser" table
  TSQLDCAuthUser = class(TSQLRecord)
  protected
    fLogonName: String; 
    fDisplayName: String; 
    fPasswordHashHexa: String; 
    fGroupRights: TID; 
    fData: TSQLRawBlob; 
    fHidden: Boolean; 
    fVerified: Boolean; 
    fEnabled: Boolean; 
    fRoles: Int64; 
  published
    property LogonName: String index 20 read fLogonName write fLogonName stored AS_UNIQUE;
    property DisplayName: String index 50 read fDisplayName write fDisplayName;
    property PasswordHashHexa: String index 64 read fPasswordHashHexa write fPasswordHashHexa;
    // defined as GroupRights: TSQLAuthGroup on the server
    property GroupRights: TID read fGroupRights write fGroupRights;
    property Data: TSQLRawBlob read fData write fData;
    property Hidden: Boolean read fHidden write fHidden;
    property Verified: Boolean read fVerified write fVerified;
    property Enabled: Boolean read fEnabled write fEnabled;
    property Roles: Int64 read fRoles write fRoles;
  end;
  
  /// map "DCAuthGroup" table
  TSQLDCAuthGroup = class(TSQLRecord)
  protected
    fIdent: String; 
    fSessionTimeout: Integer; 
    fAccessRights: String; 
  published
    property Ident: String index 50 read fIdent write fIdent stored AS_UNIQUE;
    property SessionTimeout: Integer read fSessionTimeout write fSessionTimeout;
    property AccessRights: String index 1600 read fAccessRights write fAccessRights;
  end;
  
  /// map "DCRole" table
  TSQLDCRole = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fPermissions: TObjectList; 
    fDefPermit: TPermissionSet; 
    fDefDeny: TPermissionSet; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Permissions: TObjectList read fPermissions write fPermissions;
    property DefPermit: TPermissionSet read fDefPermit write fDefPermit;
    property DefDeny: TPermissionSet read fDefDeny write fDefDeny;
  end;
  
  /// map "DCUserRoles" table
  TSQLDCUserRoles = class(TSQLRecord)
  protected
    fSource: TID; 
    fDest: TID; 
  published
    // defined as Source: TSQLDCAuthUser on the server
    property Source: TID read fSource write fSource;
    // defined as Dest: TSQLDCRole on the server
    property Dest: TID read fDest write fDest;
  end;
  
  /// map "DCConnection" table
  TSQLDCConnection = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fHost: String; 
    fPort: String; 
    fAltAddress: String; 
    fConnectTimeout: Integer; 
    fReadTimeout: Integer; 
    fUpdateIterval: Integer; 
    fEncryptData: Boolean; 
    fCompressionLevel: Integer; 
    fUserName: String; 
    fPassword: String; 
    fServerTimeID: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Host: String read fHost write fHost;
    property Port: String read fPort write fPort;
    property AltAddress: String read fAltAddress write fAltAddress;
    property ConnectTimeout: Integer read fConnectTimeout write fConnectTimeout;
    property ReadTimeout: Integer read fReadTimeout write fReadTimeout;
    property UpdateIterval: Integer read fUpdateIterval write fUpdateIterval;
    property EncryptData: Boolean read fEncryptData write fEncryptData;
    property CompressionLevel: Integer read fCompressionLevel write fCompressionLevel;
    property UserName: String read fUserName write fUserName;
    property Password: String read fPassword write fPassword;
    property ServerTimeID: String read fServerTimeID write fServerTimeID;
  end;
  
  /// map "DCTag" table
  TSQLDCTag = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fParent: TID; 
    fConnection: TID; 
    fAddr: String; 
    fTagPrototype: TID; 
    fDisplayFormat: String; 
    fStairsOptions: TDCStairsOptionsSet; 
    fTagUnitName: String; 
    fShiftKind: TDCTagShiftKind; 
    fWriteKind: TDCTagWriteKind; 
    fLookupName: String; 
    fSectionName: String; 
    fDefValue: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Parent: TSQLDCTagGroup on the server
    property Parent: TID read fParent write fParent;
    // defined as Connection: TSQLDCConnection on the server
    property Connection: TID read fConnection write fConnection;
    property Addr: String read fAddr write fAddr;
    property TagPrototype: TID read fTagPrototype write fTagPrototype;
    property DisplayFormat: String read fDisplayFormat write fDisplayFormat;
    property StairsOptions: TDCStairsOptionsSet read fStairsOptions write fStairsOptions;
    property TagUnitName: String read fTagUnitName write fTagUnitName;
    property ShiftKind: TDCTagShiftKind read fShiftKind write fShiftKind;
    property WriteKind: TDCTagWriteKind read fWriteKind write fWriteKind;
    property LookupName: String read fLookupName write fLookupName;
    property SectionName: String read fSectionName write fSectionName;
    property DefValue: String read fDefValue write fDefValue;
  end;
  
  /// map "DCTagGroup" table
  TSQLDCTagGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fAddr: String; 
    fParent: TID; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Addr: String read fAddr write fAddr;
    // defined as Parent: TSQLDCTagGroup on the server
    property Parent: TID read fParent write fParent;
  end;
  
  /// map "DCTagPrototype" table
  TSQLDCTagPrototype = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fTagTitle: String; 
    fSID: String; 
    fSectionName: String; 
    fSensorKind: TMonitoringSensorKind; 
    fDisplayFormat: String; 
    fTagUnitName: String; 
    fShiftKind: TDCTagShiftKind; 
    fWriteKind: TDCTagWriteKind; 
    fUseInReport: TDCTagUseInReport; 
    fUseInTrack: TDCTagUseInTrack; 
    fLookupName: String; 
    fDefValue: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property TagTitle: String read fTagTitle write fTagTitle;
    property SID: String read fSID write fSID;
    property SectionName: String read fSectionName write fSectionName;
    property SensorKind: TMonitoringSensorKind read fSensorKind write fSensorKind;
    property DisplayFormat: String read fDisplayFormat write fDisplayFormat;
    property TagUnitName: String read fTagUnitName write fTagUnitName;
    property ShiftKind: TDCTagShiftKind read fShiftKind write fShiftKind;
    property WriteKind: TDCTagWriteKind read fWriteKind write fWriteKind;
    property UseInReport: TDCTagUseInReport read fUseInReport write fUseInReport;
    property UseInTrack: TDCTagUseInTrack read fUseInTrack write fUseInTrack;
    property LookupName: String read fLookupName write fLookupName;
    property DefValue: String read fDefValue write fDefValue;
  end;
  
  /// map "Client" table
  TSQLClient = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fClientGroup: TID; 
    fLogin: String; 
    fDescription: String; 
    fEmail: String; 
    fPhone: String; 
    fLogins: TSQLRawBlob; 
    fContacts: TSQLRawBlob; 
    fStatus: TClientStatus; 
    fSID: String; 
    fConnection: TID; 
    fSCSTemplate: TID; 
    fSCSSchedulesInfo: String; 
    fSCSProject: String; 
    fSCSProjectAddr: String; 
    fSCSProjectServerFileName: String; 
    fSCSProjectCreateClientGroup: Boolean; 
    fWEBTemplate: TID; 
    fWEBProject: String; 
    fSCSProjectParams: TSCSProjectParams; 
  public
    property SCSProjectParams: TSCSProjectParams read fSCSProjectParams write fSCSProjectParams;
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as ClientGroup: TSQLClientGroup on the server
    property ClientGroup: TID read fClientGroup write fClientGroup;
    property Login: String read fLogin write fLogin;
    property Description: String read fDescription write fDescription;
    property Email: String read fEmail write fEmail;
    property Phone: String read fPhone write fPhone;
    property Logins: TSQLRawBlob read fLogins write fLogins;
    property Contacts: TSQLRawBlob read fContacts write fContacts;
    property Status: TClientStatus read fStatus write fStatus;
    property SID: String read fSID write fSID;
    // defined as Connection: TSQLDCConnection on the server
    property Connection: TID read fConnection write fConnection;
    // defined as SCSTemplate: TSQLSCSProjectTemplate on the server
    property SCSTemplate: TID read fSCSTemplate write fSCSTemplate;
    property SCSSchedulesInfo: String read fSCSSchedulesInfo write fSCSSchedulesInfo;
    property SCSProject: String read fSCSProject write fSCSProject;
    property SCSProjectAddr: String read fSCSProjectAddr write fSCSProjectAddr;
    property SCSProjectServerFileName: String read fSCSProjectServerFileName write fSCSProjectServerFileName;
    property SCSProjectCreateClientGroup: Boolean read fSCSProjectCreateClientGroup write fSCSProjectCreateClientGroup;
    // defined as WEBTemplate: TSQLWEBProjectTemplate on the server
    property WEBTemplate: TID read fWEBTemplate write fWEBTemplate;
    property WEBProject: String read fWEBProject write fWEBProject;
  end;
  
  /// map "SCSObject" table
  TSQLSCSObject = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fSID: String; 
    fClient: TID; 
    fSCSGroup: TID; 
    fGPSTracker: TID; 
    fSymbol: String; 
    fKind: TSCSObjectKind; 
    fIcon: TSCSObjectIcon; 
    fStatusEvalExpr: String; 
    fRefuelingEvalExpr: String; 
    fFuelDrainEvalExpr: String; 
    fMinRefuelingToRep: Double; 
    fMinFuelDrainToRep: Double; 
    fFields: Variant; 
    fParams: Variant; 
    fEventsInfo: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property SID: String read fSID write fSID;
    // defined as Client: TSQLClient on the server
    property Client: TID read fClient write fClient;
    // defined as SCSGroup: TSQLSCSGroup on the server
    property SCSGroup: TID read fSCSGroup write fSCSGroup;
    // defined as GPSTracker: TSQLGPSTracker on the server
    property GPSTracker: TID read fGPSTracker write fGPSTracker;
    property Symbol: String index 1 read fSymbol write fSymbol;
    property Kind: TSCSObjectKind read fKind write fKind;
    property Icon: TSCSObjectIcon read fIcon write fIcon;
    property StatusEvalExpr: String read fStatusEvalExpr write fStatusEvalExpr;
    property RefuelingEvalExpr: String read fRefuelingEvalExpr write fRefuelingEvalExpr;
    property FuelDrainEvalExpr: String read fFuelDrainEvalExpr write fFuelDrainEvalExpr;
    property MinRefuelingToRep: Double read fMinRefuelingToRep write fMinRefuelingToRep;
    property MinFuelDrainToRep: Double read fMinFuelDrainToRep write fMinFuelDrainToRep;
    property Fields: Variant read fFields write fFields;
    property Params: Variant read fParams write fParams;
    property EventsInfo: String read fEventsInfo write fEventsInfo;
  end;
  
  /// map "SCSGroup" table
  TSQLSCSGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fClient: TID; 
    fParent: TID; 
    fSectionName: String; 
    fParentSectionName: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Client: TSQLClient on the server
    property Client: TID read fClient write fClient;
    // defined as Parent: TSQLSCSGroup on the server
    property Parent: TID read fParent write fParent;
    property SectionName: String read fSectionName write fSectionName;
    property ParentSectionName: String read fParentSectionName write fParentSectionName;
  end;
  
  /// map "GPSTracker" table
  TSQLGPSTracker = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fSID: String; 
    fPhone: String; 
    fIMEI: String; 
    fLogin: String; 
    fConnection: TID; 
    fSIMCard: TID; 
    fTags: TTrackerTags; 
    fTagCollection: TCollection; 
    fClient: TID; 
    fTrackerGroup: TID; 
    fTrackerType: TGPSTrackerType; 
    fTrackerModel: String; 
    fMonitoringParams: TTrackerMonitoringParams; 
    fFirmware: String; 
    fConfigInfo: String; 
    fStatus: TGPSTraсkerStatus; 
    fStatusHistory: TSQLRawBlob; 
    fComment: String; 
    fHistory: Variant; 
    fSCSObject: TID; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property SID: String read fSID write fSID stored AS_UNIQUE;
    property Phone: String read fPhone write fPhone;
    property IMEI: String index 15 read fIMEI write fIMEI;
    property Login: String read fLogin write fLogin;
    // defined as Connection: TSQLDCConnection on the server
    property Connection: TID read fConnection write fConnection;
    // defined as SIMCard: TSQLSimCard on the server
    property SIMCard: TID read fSIMCard write fSIMCard;
    property Tags: TTrackerTags read fTags write fTags;
    property TagCollection: TCollection read fTagCollection write fTagCollection;
    // defined as Client: TSQLClient on the server
    property Client: TID read fClient write fClient;
    // defined as TrackerGroup: TSQLGPSTrackerGroup on the server
    property TrackerGroup: TID read fTrackerGroup write fTrackerGroup;
    property TrackerType: TGPSTrackerType read fTrackerType write fTrackerType;
    property TrackerModel: String read fTrackerModel write fTrackerModel;
    property MonitoringParams: TTrackerMonitoringParams read fMonitoringParams write fMonitoringParams;
    property Firmware: String read fFirmware write fFirmware;
    property ConfigInfo: String read fConfigInfo write fConfigInfo;
    property Status: TGPSTraсkerStatus read fStatus write fStatus;
    property StatusHistory: TSQLRawBlob read fStatusHistory write fStatusHistory;
    property Comment: String read fComment write fComment;
    property History: Variant read fHistory write fHistory;
    // defined as SCSObject: TSQLSCSObject on the server
    property SCSObject: TID read fSCSObject write fSCSObject;
  end;
  
  /// map "GPSTrackerGroup" table
  TSQLGPSTrackerGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fClient: TID; 
    fParent: TID; 
    fSectionName: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Client: TSQLClient on the server
    property Client: TID read fClient write fClient;
    // defined as Parent: TSQLGPSTrackerGroup on the server
    property Parent: TID read fParent write fParent;
    property SectionName: String read fSectionName write fSectionName;
  end;
  
  /// map "SimCard" table
  TSQLSimCard = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fPhone: String; 
    fIMSI: String; 
    fICCID: String; 
    fPIN: Integer; 
    fAccount: String; 
    fMobileOperator: String; 
    fIsAvailableToManage: Boolean; 
    fStatus: TSimCardStatus; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Phone: String read fPhone write fPhone stored AS_UNIQUE;
    property IMSI: String index 15 read fIMSI write fIMSI;
    property ICCID: String index 19 read fICCID write fICCID;
    property PIN: Integer read fPIN write fPIN;
    property Account: String index 10 read fAccount write fAccount;
    property MobileOperator: String read fMobileOperator write fMobileOperator;
    property IsAvailableToManage: Boolean read fIsAvailableToManage write fIsAvailableToManage;
    property Status: TSimCardStatus read fStatus write fStatus;
  end;
  
  /// map "SCSProjectTemplate" table
  TSQLSCSProjectTemplate = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fData: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Data: String read fData write fData;
  end;
  
  /// map "WEBProjectTemplate" table
  TSQLWEBProjectTemplate = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fData: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Data: String read fData write fData;
  end;
  
  /// map "DCTask" table
  TSQLDCTask = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fFunctionName: String; 
    fScheduler: TDCScheduler; 
    fLastExecAt: TDateTime; 
    fLastExecResult: Boolean; 
    fIsActive: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property FunctionName: String read fFunctionName write fFunctionName;
    property Scheduler: TDCScheduler read fScheduler write fScheduler;
    property LastExecAt: TDateTime read fLastExecAt write fLastExecAt;
    property LastExecResult: Boolean read fLastExecResult write fLastExecResult;
    property IsActive: Boolean read fIsActive write fIsActive;
  end;
  
  /// map "MonitoringSystemControl" table
  TSQLMonitoringSystemControl = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fSystemControlGroup: TID; 
    fIsEnable: Boolean; 
    fStrParam: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as SystemControlGroup: TSQLMonitoringSystemControlGroup on the server
    property SystemControlGroup: TID read fSystemControlGroup write fSystemControlGroup;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
    property StrParam: String read fStrParam write fStrParam;
  end;
  
  /// map "MonitoringSystemControlGroup" table
  TSQLMonitoringSystemControlGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fSystemControlGroup: TID; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as SystemControlGroup: TSQLMonitoringSystemControlGroup on the server
    property SystemControlGroup: TID read fSystemControlGroup write fSystemControlGroup;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringUser" table
  TSQLMonitoringUser = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    feTitle: String; 
    fRole: TID; 
    fPassword: String; 
    fEnabled: Boolean; 
    fDisableReason: String; 
    fHidden: Boolean; 
    fDisableLog: Boolean; 
    fLogGPRS: Boolean; 
    fSyncData: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property eTitle: String read feTitle write feTitle;
    // defined as Role: TSQLMonitoringRole on the server
    property Role: TID read fRole write fRole;
    property Password: String read fPassword write fPassword;
    property Enabled: Boolean read fEnabled write fEnabled;
    property DisableReason: String read fDisableReason write fDisableReason;
    property Hidden: Boolean read fHidden write fHidden;
    property DisableLog: Boolean read fDisableLog write fDisableLog;
    property LogGPRS: Boolean read fLogGPRS write fLogGPRS;
    property SyncData: Boolean read fSyncData write fSyncData;
  end;
  
  /// map "MonitoringRole" table
  TSQLMonitoringRole = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fPermission: String; 
    fDescription: String; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Permission: String read fPermission write fPermission;
    property Description: String read fDescription write fDescription;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringUserRole" table
  TSQLMonitoringUserRole = class(TSQLRecord)
  protected
    fUser: TID; 
    fRole: TID; 
  published
    property User: TID read fUser write fUser;
    property Role: TID read fRole write fRole;
  end;
  
  /// map "MonitoringSyncServer" table
  TSQLMonitoringSyncServer = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fHost: String; 
    fPort: Integer; 
    fPath: String; 
    fInterval: Integer; 
    fMustBeInList: Boolean; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property Host: String read fHost write fHost;
    property Port: Integer read fPort write fPort;
    property Path: String read fPath write fPath;
    property Interval: Integer read fInterval write fInterval;
    property MustBeInList: Boolean read fMustBeInList write fMustBeInList;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringUserSyncServer" table
  TSQLMonitoringUserSyncServer = class(TSQLRecord)
  protected
    fUser: TID; 
    fSyncServer: TID; 
  published
    property User: TID read fUser write fUser;
    property SyncServer: TID read fSyncServer write fSyncServer;
  end;
  
  /// map "MonitoringObjecType" table
  TSQLMonitoringObjecType = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
  end;
  
  /// map "MonitoringObjectPermission" table
  TSQLMonitoringObjectPermission = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fRole: TID; 
    fObjectType: TID; 
    fObjectID: TID; 
    fObjectName: String; 
    fPermit: String; 
    fDeny: String; 
    fDescription: String; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Role: TID read fRole write fRole;
    // defined as ObjectType: TSQLMonitoringObjecType on the server
    property ObjectType: TID read fObjectType write fObjectType;
    property ObjectID: TID read fObjectID write fObjectID;
    property ObjectName: String read fObjectName write fObjectName;
    property Permit: String read fPermit write fPermit;
    property Deny: String read fDeny write fDeny;
    property Description: String read fDescription write fDescription;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringConnection" table
  TSQLMonitoringConnection = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fSystemType: TSystemTypes; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property SystemType: TSystemTypes read fSystemType write fSystemType;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringDeviceGroup" table
  TSQLMonitoringDeviceGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fDeviceGroup: TID; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property DeviceGroup: TID read fDeviceGroup write fDeviceGroup;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringDevice" table
  TSQLMonitoringDevice = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fDeviceGroup: TID; 
    fConnection: TID; 
    fPath: String; 
    fUser: TID; 
    fData: String; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    property DeviceGroup: TID read fDeviceGroup write fDeviceGroup;
    // defined as Connection: TSQLMonitoringConnection on the server
    property Connection: TID read fConnection write fConnection;
    property Path: String read fPath write fPath;
    // defined as User: TSQLMonitoringUser on the server
    property User: TID read fUser write fUser;
    property Data: String read fData write fData;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringObjectKind" table
  TSQLMonitoringObjectKind = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
  end;
  
  /// map "MonitoringGroup" table
  TSQLMonitoringGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fProto: TID; 
    fMonitoringGroup: TID; 
    feTitle: String; 
    fKind: TID; 
    fSID: String; 
    fUseParentSID: Boolean; 
    fFullSID: String; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Proto: TSQLMonitoringGroup on the server
    property Proto: TID read fProto write fProto;
    property MonitoringGroup: TID read fMonitoringGroup write fMonitoringGroup;
    property eTitle: String read feTitle write feTitle;
    // defined as Kind: TSQLMonitoringObjectKind on the server
    property Kind: TID read fKind write fKind;
    property SID: String read fSID write fSID;
    property UseParentSID: Boolean read fUseParentSID write fUseParentSID;
    property FullSID: String read fFullSID write fFullSID;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "MonitoringSensorUnit" table
  TSQLMonitoringSensorUnit = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
  end;
  
  /// map "MonitoringSensor" table
  TSQLMonitoringSensor = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fProto: TID; 
    fEnTitle: String; 
    fDescription: String; 
    fSID: String; 
    fUseParentSID: Boolean; 
    fFullSID: String; 
    fMonitoringGroup: TID; 
    fDevice: TID; 
    fPath: String; 
    fWritePath: String; 
    fSensorKind: TMonitoringSensorKind; 
    fSensorUnit: TID; 
    fDisplayFormat: String; 
    fMinReadInterval: Integer; 
    fUpdateInterval: Integer; 
    fUpdateDBInterval: Integer; 
    fPrec: Integer; 
    fDelta: Double; 
    fExtDeadBand: Double; 
    fVn: Double; 
    fApproxPrecision: Double; 
    fTransData: Variant; 
    fDataExtractParams: String; 
    fCoefMul: Double; 
    fCoefAdd: Double; 
    fFuncName: String; 
    fOnChangeValue: String; 
    fReadConvertFuncName: String; 
    fWriteConvertFuncName: String; 
    fDataWriterKind: TMonitoringDataWriteKind; 
    fBufferMaxInterval: Integer; 
    fBufferMaxRecCount: Integer; 
    fSmoothKind: TMonitoringSmoothKind; 
    fSmoothInterval: Integer; 
    fSmoothCount: Integer; 
    fRefTableName: String; 
    fRefAutoFill: Boolean; 
    fRefIgnoreNotInList: Boolean; 
    fRefValue: TMonitoringRefValueKind; 
    fRefValueFormat: TRefValueFormat; 
    fRefLayerFileName: String; 
    fRefLayerFieldName: String; 
    fIsMin: Boolean; 
    fIsMax: Boolean; 
    fMinValue: Double; 
    fMaxValue: Double; 
    fScriptCheckValues: String; 
    fInitOnCreate: Boolean; 
    fTimeShift: Integer; 
    fTimeStart: TDateTime; 
    fCalcOrder: Integer; 
    fIsEnable: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Proto: TSQLMonitoringSensor on the server
    property Proto: TID read fProto write fProto;
    property EnTitle: String read fEnTitle write fEnTitle;
    property Description: String read fDescription write fDescription;
    property SID: String read fSID write fSID;
    property UseParentSID: Boolean read fUseParentSID write fUseParentSID;
    property FullSID: String read fFullSID write fFullSID;
    property MonitoringGroup: TID read fMonitoringGroup write fMonitoringGroup;
    // defined as Device: TSQLMonitoringDevice on the server
    property Device: TID read fDevice write fDevice;
    property Path: String read fPath write fPath;
    property WritePath: String read fWritePath write fWritePath;
    property SensorKind: TMonitoringSensorKind read fSensorKind write fSensorKind;
    // defined as SensorUnit: TSQLMonitoringSensorUnit on the server
    property SensorUnit: TID read fSensorUnit write fSensorUnit;
    property DisplayFormat: String read fDisplayFormat write fDisplayFormat;
    property MinReadInterval: Integer read fMinReadInterval write fMinReadInterval;
    property UpdateInterval: Integer read fUpdateInterval write fUpdateInterval;
    property UpdateDBInterval: Integer read fUpdateDBInterval write fUpdateDBInterval;
    property Prec: Integer read fPrec write fPrec;
    property Delta: Double read fDelta write fDelta;
    property ExtDeadBand: Double read fExtDeadBand write fExtDeadBand;
    property Vn: Double read fVn write fVn;
    property ApproxPrecision: Double read fApproxPrecision write fApproxPrecision;
    property TransData: Variant read fTransData write fTransData;
    property DataExtractParams: String read fDataExtractParams write fDataExtractParams;
    property CoefMul: Double read fCoefMul write fCoefMul;
    property CoefAdd: Double read fCoefAdd write fCoefAdd;
    property FuncName: String read fFuncName write fFuncName;
    property OnChangeValue: String read fOnChangeValue write fOnChangeValue;
    property ReadConvertFuncName: String read fReadConvertFuncName write fReadConvertFuncName;
    property WriteConvertFuncName: String read fWriteConvertFuncName write fWriteConvertFuncName;
    property DataWriterKind: TMonitoringDataWriteKind read fDataWriterKind write fDataWriterKind;
    property BufferMaxInterval: Integer read fBufferMaxInterval write fBufferMaxInterval;
    property BufferMaxRecCount: Integer read fBufferMaxRecCount write fBufferMaxRecCount;
    property SmoothKind: TMonitoringSmoothKind read fSmoothKind write fSmoothKind;
    property SmoothInterval: Integer read fSmoothInterval write fSmoothInterval;
    property SmoothCount: Integer read fSmoothCount write fSmoothCount;
    property RefTableName: String read fRefTableName write fRefTableName;
    property RefAutoFill: Boolean read fRefAutoFill write fRefAutoFill;
    property RefIgnoreNotInList: Boolean read fRefIgnoreNotInList write fRefIgnoreNotInList;
    property RefValue: TMonitoringRefValueKind read fRefValue write fRefValue;
    property RefValueFormat: TRefValueFormat read fRefValueFormat write fRefValueFormat;
    property RefLayerFileName: String read fRefLayerFileName write fRefLayerFileName;
    property RefLayerFieldName: String read fRefLayerFieldName write fRefLayerFieldName;
    property IsMin: Boolean read fIsMin write fIsMin;
    property IsMax: Boolean read fIsMax write fIsMax;
    property MinValue: Double read fMinValue write fMinValue;
    property MaxValue: Double read fMaxValue write fMaxValue;
    property ScriptCheckValues: String read fScriptCheckValues write fScriptCheckValues;
    property InitOnCreate: Boolean read fInitOnCreate write fInitOnCreate;
    property TimeShift: Integer read fTimeShift write fTimeShift;
    property TimeStart: TDateTime read fTimeStart write fTimeStart;
    property CalcOrder: Integer read fCalcOrder write fCalcOrder;
    property IsEnable: Boolean read fIsEnable write fIsEnable;
  end;
  
  /// map "ProjectOperation" table
  TSQLProjectOperation = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
  end;
  
  /// map "Project" table
  TSQLProject = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fProjectGroup: TID; 
    fOwner: String; 
    fLocation: String; 
    fDescription: String; 
    fZipName: String; 
    fDevEnviroment: String; 
    fPlant: String; 
    fEquipment: String; 
    fProcess: String; 
    fIsDeleted: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as ProjectGroup: TSQLProjectGroup on the server
    property ProjectGroup: TID read fProjectGroup write fProjectGroup;
    property Owner: String read fOwner write fOwner;
    property Location: String read fLocation write fLocation;
    property Description: String read fDescription write fDescription;
    property ZipName: String read fZipName write fZipName;
    property DevEnviroment: String read fDevEnviroment write fDevEnviroment;
    property Plant: String read fPlant write fPlant;
    property Equipment: String read fEquipment write fEquipment;
    property Process: String read fProcess write fProcess;
    property IsDeleted: Boolean read fIsDeleted write fIsDeleted;
  end;
  
  /// map "ProjectGroup" table
  TSQLProjectGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fProjectGroup: TID; 
    fDescription: String; 
    fIsDeleted: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as ProjectGroup: TSQLProjectGroup on the server
    property ProjectGroup: TID read fProjectGroup write fProjectGroup;
    property Description: String read fDescription write fDescription;
    property IsDeleted: Boolean read fIsDeleted write fIsDeleted;
  end;
  
  /// map "ProjectVersion" table
  TSQLProjectVersion = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
    fProject: TID; 
    fUserFileName: String; 
    fVersionNo: Integer; 
    fVersionDate: TDateTime; 
    fComment: String; 
    fDescription: String; 
    fFileSize: Integer; 
    fAuthor: String; 
    fIsDeleted: Boolean; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
    // defined as Project: TSQLProject on the server
    property Project: TID read fProject write fProject;
    property UserFileName: String read fUserFileName write fUserFileName;
    property VersionNo: Integer read fVersionNo write fVersionNo;
    property VersionDate: TDateTime read fVersionDate write fVersionDate;
    property Comment: String read fComment write fComment;
    property Description: String read fDescription write fDescription;
    property FileSize: Integer read fFileSize write fFileSize;
    property Author: String read fAuthor write fAuthor;
    property IsDeleted: Boolean read fIsDeleted write fIsDeleted;
  end;
  
  /// map "ProjectOperationLog" table
  TSQLProjectOperationLog = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fMoment: TDateTime; 
    fProject: TID; 
    fProjectVersion: TID; 
    fUser: TID; 
    fProjectOperation: TID; 
    fParam: String; 
    fDescription: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Moment: TDateTime read fMoment write fMoment;
    // defined as Project: TSQLProject on the server
    property Project: TID read fProject write fProject;
    // defined as ProjectVersion: TSQLProjectVersion on the server
    property ProjectVersion: TID read fProjectVersion write fProjectVersion;
    // defined as User: TSQLMonitoringUser on the server
    property User: TID read fUser write fUser;
    // defined as ProjectOperation: TSQLProjectOperation on the server
    property ProjectOperation: TID read fProjectOperation write fProjectOperation;
    property Param: String read fParam write fParam;
    property Description: String read fDescription write fDescription;
  end;
  
  /// map "ClientGroup" table
  TSQLClientGroup = class(TSQLRecord)
  protected
    fCreateTime: TCreateTime; 
    fModTime: TModTime; 
    fSessionUser: TID; 
    fVersion: TRecordVersion; 
    fTitle: String; 
  published
    property CreateTime: TCreateTime read fCreateTime write fCreateTime;
    property ModTime: TModTime read fModTime write fModTime;
    property SessionUser: TID read fSessionUser write fSessionUser;
    property Version: TRecordVersion read fVersion write fVersion;
    property Title: String read fTitle write fTitle;
  end;
  
  /// service implemented by TServiceViewData
  // - you can access this service as such:
  // !var aViewData: IViewData;
  // !begin
  // !   aViewData := TServiceViewData.Create(aClient);
  // !   // now you can use aViewData methods
  // !...
  IViewData = interface(IServiceAbstract)
    ['{B14F4D05-A524-4DB7-ACE7-40F97DFE3DA7}']
    function Help(): String;
    function GetSensorData(const ID: String): TSensorValueDTO;
    function GetSensorsData(const IDs: TIDs): TSensorDataDTA;
    function GetSensorValue(const ID: String): Double;
    function GetSensorsValues(const IDs: TIDs): TDoubleDynArray;
    function GetSensorHistory(const ID: String; const Date1: String; const Date2: String): TSensorHistoryArray;
    function CalcCounter(const ID: String; const Date1: String; const Date2: String): Double;
  end;

  /// implements IViewData from http://localhost:89/DC/ViewData
  // - this service will run in sicClientDriven mode
  TServiceViewData = class(TServiceClientAbstractClientDriven,IViewData)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function GetSensorData(const ID: String): TSensorValueDTO;
    function GetSensorsData(const IDs: TIDs): TSensorDataDTA;
    function GetSensorValue(const ID: String): Double;
    function GetSensorsValues(const IDs: TIDs): TDoubleDynArray;
    function GetSensorHistory(const ID: String; const Date1: String; const Date2: String): TSensorHistoryArray;
    function CalcCounter(const ID: String; const Date1: String; const Date2: String): Double;
  end;

  /// service implemented by TServiceMonitoring
  // - you can access this service as such:
  // !var aMonitoring: IMonitoring;
  // !begin
  // !   aMonitoring := TServiceMonitoring.Create(aClient);
  // !   // now you can use aMonitoring methods
  // !...
  IMonitoring = interface(IServiceAbstract)
    ['{27BA80C4-482F-4908-8EED-5D361C0EE532}']
    function DateTimeToMoment(const aDateTime: TDateTime): Int64;
    function MomentToDateTime(const aMoment: Int64): TDateTime;
    function SensorValue(const SID: String): String;
    function SensorData(const SID: String): TDataRec;
    function SensorDataExt(const SID: String): TDataRecExt;
    function GroupSensorValue(const SIDs: TSIDArr): TValArr;
    function GroupSensorData(const SIDs: TSIDArr): TDataRecArr;
    function GroupSensorDataExt(const SIDs: TSIDArr): TDataRecExtArr;
    function SensorValueByID(const ID: TID): String;
    function SensorDataByID(const ID: TID): TDataRec;
    function SensorDataExtByID(const ID: TID): TDataRecExt;
    function GroupSensorValueByID(const IDs: TIDArr): TValArr;
    function GroupSensorDataByID(const IDs: TIDArr): TDataRecArr;
    function GroupSensorDataExtByID(const IDs: TIDArr): TDataRecExtArr;
    function SensorDataAsText(const SID: String): String;
    function SensorsDataAsText(const SIDs: TSIDArr): String;
    function SensorHistory(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecArr;
    function SensorHistoryExt(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecExtArr;
    function CloneGroup(const aGroupID: TID; const aCloneChildren: Boolean; const aCloneSensors: Boolean; const aCloneDevices: Boolean; const aCount: Integer): Integer;
    procedure InitSensorsByID(const IDs: TIntegerDynArray);
    procedure InitGroupsByID(const IDs: TIntegerDynArray);
    procedure InitDevicesByID(const IDs: TIntegerDynArray);
  end;

  /// implements IMonitoring from http://localhost:89/DC/Monitoring
  // - this service will run in sicClientDriven mode
  TServiceMonitoring = class(TServiceClientAbstractClientDriven,IMonitoring)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function DateTimeToMoment(const aDateTime: TDateTime): Int64;
    function MomentToDateTime(const aMoment: Int64): TDateTime;
    function SensorValue(const SID: String): String;
    function SensorData(const SID: String): TDataRec;
    function SensorDataExt(const SID: String): TDataRecExt;
    function GroupSensorValue(const SIDs: TSIDArr): TValArr;
    function GroupSensorData(const SIDs: TSIDArr): TDataRecArr;
    function GroupSensorDataExt(const SIDs: TSIDArr): TDataRecExtArr;
    function SensorValueByID(const ID: TID): String;
    function SensorDataByID(const ID: TID): TDataRec;
    function SensorDataExtByID(const ID: TID): TDataRecExt;
    function GroupSensorValueByID(const IDs: TIDArr): TValArr;
    function GroupSensorDataByID(const IDs: TIDArr): TDataRecArr;
    function GroupSensorDataExtByID(const IDs: TIDArr): TDataRecExtArr;
    function SensorDataAsText(const SID: String): String;
    function SensorsDataAsText(const SIDs: TSIDArr): String;
    function SensorHistory(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecArr;
    function SensorHistoryExt(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecExtArr;
    function CloneGroup(const aGroupID: TID; const aCloneChildren: Boolean; const aCloneSensors: Boolean; const aCloneDevices: Boolean; const aCount: Integer): Integer;
    procedure InitSensorsByID(const IDs: TIntegerDynArray);
    procedure InitGroupsByID(const IDs: TIntegerDynArray);
    procedure InitDevicesByID(const IDs: TIntegerDynArray);
  end;

  /// service implemented by TServiceSCSReport
  // - you can access this service as such:
  // !var aSCSReport: ISCSReport;
  // !begin
  // !   aSCSReport := TServiceSCSReport.Create(aClient);
  // !   // now you can use aSCSReport methods
  // !...
  ISCSReport = interface(IServiceAbstract)
    ['{767205D2-4C45-4866-87E3-FFACC71BF769}']
    function Help(): String;
    function GetTrackWorkRep(var Params: TRepTableParams): TSCSTrackWorkArr;
    function GetStops(var Params: TRepTableParams): TSCSStopArr;
    function OutletVisitReport(const Params: TOVRParams): TOVRResult;
    function FullReport(const TrackerSID: String; const Date1: TDateTime; const Date2: TDateTime): Variant;
    function GetTrack(const Tracker: TTrackerParams; const Interval: TIntervalParams): TSCSTrackLine;
    function CalcClientActivity(const ClientID: Integer; const Date1: String; const Date2: String): TSCSClientActivityArr;
  end;

  /// implements ISCSReport from http://localhost:89/DC/SCSReport
  // - this service will run in sicClientDriven mode
  TServiceSCSReport = class(TServiceClientAbstractClientDriven,ISCSReport)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function GetTrackWorkRep(var Params: TRepTableParams): TSCSTrackWorkArr;
    function GetStops(var Params: TRepTableParams): TSCSStopArr;
    function OutletVisitReport(const Params: TOVRParams): TOVRResult;
    function FullReport(const TrackerSID: String; const Date1: TDateTime; const Date2: TDateTime): Variant;
    function GetTrack(const Tracker: TTrackerParams; const Interval: TIntervalParams): TSCSTrackLine;
    function CalcClientActivity(const ClientID: Integer; const Date1: String; const Date2: String): TSCSClientActivityArr;
  end;

  /// service implemented by TServiceDCControl
  // - you can access this service as such:
  // !var aDCControl: IDCControl;
  // !begin
  // !   aDCControl := TServiceDCControl.Create(aClient);
  // !   // now you can use aDCControl methods
  // !...
  IDCControl = interface(IServiceAbstract)
    ['{4A66D39F-985A-49AE-9372-74C77C4E732C}']
    function Help(): String;
    function TurnOffUser(const aUser: String; const aMessage: String): Boolean;
    function TurnOnUser(const aUser: String): Boolean;
    function GetDCSessionUser(out aUser: ): Boolean;
    function UseSession(): Boolean;
    function RenameLookup(const aFrom: String; const aTo: String): Boolean;
    function ReinitPrototypes(): Boolean;
  end;

  /// implements IDCControl from http://localhost:89/DC/DCControl
  // - this service will run in sicClientDriven mode
  TServiceDCControl = class(TServiceClientAbstractClientDriven,IDCControl)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function TurnOffUser(const aUser: String; const aMessage: String): Boolean;
    function TurnOnUser(const aUser: String): Boolean;
    function GetDCSessionUser(out aUser: ): Boolean;
    function UseSession(): Boolean;
    function RenameLookup(const aFrom: String; const aTo: String): Boolean;
    function ReinitPrototypes(): Boolean;
  end;

  /// service implemented by TServiceImportModelData
  // - you can access this service as such:
  // !var aImportModelData: IImportModelData;
  // !begin
  // !   aImportModelData := TServiceImportModelData.Create(aClient);
  // !   // now you can use aImportModelData methods
  // !...
  IImportModelData = interface(IServiceAbstract)
    ['{B83E43B0-B9BE-4ACF-8970-EB36E667FA4D}']
    function ImportProjectFromSCP(const aClientID: Integer; const aProject: String): Boolean;
  end;

  /// implements IImportModelData from http://localhost:89/DC/ImportModelData
  // - this service will run in sicClientDriven mode
  TServiceImportModelData = class(TServiceClientAbstractClientDriven,IImportModelData)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function ImportProjectFromSCP(const aClientID: Integer; const aProject: String): Boolean;
  end;

  /// service implemented by TServiceBillingSystem
  // - you can access this service as such:
  // !var aBillingSystem: IBillingSystem;
  // !begin
  // !   aBillingSystem := TServiceBillingSystem.Create(aClient);
  // !   // now you can use aBillingSystem methods
  // !...
  IBillingSystem = interface(IServiceAbstract)
    ['{5C2323E0-1EA1-4A02-B8E6-3E860E0AF919}']
    function Help(): String;
    procedure TestException();
    function GetUsers(): TBillingUsersDTO;
    function AddUser(const LogonName: String): TBillingUserDTO;
    function GetClients(): TBillingClientsDTO;
    function GetUserClients(const UserLogonName: String): TBillingClientsDTO;
    function AddClient(const ClientName: String): TBillingClientDTO;
    function UpdateClientTitle(const ClientID: Integer; const ClientName: String): Boolean;
    function GetClientTrackers(const ClientID: Integer): TBillingTrackersDTO;
    function GetTrackerStatusHistory(const TrackerID: Integer): TBillingTrackerStatusHistoryDTO;
    function TurnOffTracker(const TrackerID: Integer; const Freeze: Boolean): Boolean;
    function TurnOnTracker(const TrackerID: Integer): Boolean;
    function DisableClient(const ClientID: Integer): Boolean;
    function EnableClient(const ClientID: Integer): Boolean;
    function TurnOnClient(const ClientID: Integer): Boolean;
    function TurnOffClient(const ClientID: Integer): Boolean;
    function GetSIMCards(): TBillingSIMCardsDTO;
    function SetSIMCards(const Cards: TBillingSIMCardsDTO): Boolean;
  end;

  /// implements IBillingSystem from http://localhost:89/DC/BillingSystem
  // - this service will run in sicClientDriven mode
  TServiceBillingSystem = class(TServiceClientAbstractClientDriven,IBillingSystem)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    procedure TestException();
    function GetUsers(): TBillingUsersDTO;
    function AddUser(const LogonName: String): TBillingUserDTO;
    function GetClients(): TBillingClientsDTO;
    function GetUserClients(const UserLogonName: String): TBillingClientsDTO;
    function AddClient(const ClientName: String): TBillingClientDTO;
    function UpdateClientTitle(const ClientID: Integer; const ClientName: String): Boolean;
    function GetClientTrackers(const ClientID: Integer): TBillingTrackersDTO;
    function GetTrackerStatusHistory(const TrackerID: Integer): TBillingTrackerStatusHistoryDTO;
    function TurnOffTracker(const TrackerID: Integer; const Freeze: Boolean): Boolean;
    function TurnOnTracker(const TrackerID: Integer): Boolean;
    function DisableClient(const ClientID: Integer): Boolean;
    function EnableClient(const ClientID: Integer): Boolean;
    function TurnOnClient(const ClientID: Integer): Boolean;
    function TurnOffClient(const ClientID: Integer): Boolean;
    function GetSIMCards(): TBillingSIMCardsDTO;
    function SetSIMCards(const Cards: TBillingSIMCardsDTO): Boolean;
  end;

  /// service implemented by TServiceSCSSystem
  // - you can access this service as such:
  // !var aSCSSystem: ISCSSystem;
  // !begin
  // !   aSCSSystem := TServiceSCSSystem.Create(aClient);
  // !   // now you can use aSCSSystem methods
  // !...
  ISCSSystem = interface(IServiceAbstract)
    ['{2A452AD9-3534-4C56-B251-1C1ADF1E0E6D}']
    function Help(): String;
    function GetTrackerTagsFromMonitoring(const ConnectionID: Integer; const TrackerAddr: String; const Params: TSCSProjectParams; out Tags: ): Boolean;
    function UpdateTrackerTagsFromMonitoring(const TrackerID: Integer; const Params: TSCSProjectParams): Boolean;
    function AddClientTrackersFromMonitoring(const ClientID: Integer; const SID: String): Integer;
    function GetNewTrackerName(const ClientID: Integer): String;
    function AddOrUpdateTrackerInMonitoring(const ConnectionID: Integer; const Params: TAddTrackerParamsDTO): Boolean;
    function AddOrUpdateTracker(const ClientID: Integer; var Params: TAddTrackerParamsDTO): Boolean;
    function MakeSCSProject(const ClientID: Integer; out aProject: String): Boolean;
    function MakeSCSUserProject(const aLogonName: String; out aProject: String): Boolean;
    function MakeSCSProjectOnServer(const ClientID: Integer): Boolean;
    function MakeSCSUserProjectOnServer(const aLogonName: String; const aFileName: String): Boolean;
    function MakeReaperTags(const ClientID: Integer; out aProject: String): Boolean;
    function SetTrackerStatus(const TrackerID: Integer; const Status: TGPSTraсkerStatus; const Moment: TDateTime): Boolean;
    function GetTrackersWithRealIMEI(const ClientID: Integer): Variant;
    procedure SetIMEIToTracker(const aTrackerSID: String; const aIMEI: String);
    procedure SetTitleToTracker(const aTrackerSID: String; const aTitle: String);
    function CreateClient(const aClientID: Integer): Integer;
    function CreateTracker(const aClientID: Integer; const aTrackerSID: String; const aTrackerLogin: String; const aProtoSID: String; const aInherit: Boolean): Integer;
  end;

  /// implements ISCSSystem from http://localhost:89/DC/SCSSystem
  // - this service will run in sicClientDriven mode
  TServiceSCSSystem = class(TServiceClientAbstractClientDriven,ISCSSystem)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function GetTrackerTagsFromMonitoring(const ConnectionID: Integer; const TrackerAddr: String; const Params: TSCSProjectParams; out Tags: ): Boolean;
    function UpdateTrackerTagsFromMonitoring(const TrackerID: Integer; const Params: TSCSProjectParams): Boolean;
    function AddClientTrackersFromMonitoring(const ClientID: Integer; const SID: String): Integer;
    function GetNewTrackerName(const ClientID: Integer): String;
    function AddOrUpdateTrackerInMonitoring(const ConnectionID: Integer; const Params: TAddTrackerParamsDTO): Boolean;
    function AddOrUpdateTracker(const ClientID: Integer; var Params: TAddTrackerParamsDTO): Boolean;
    function MakeSCSProject(const ClientID: Integer; out aProject: String): Boolean;
    function MakeSCSUserProject(const aLogonName: String; out aProject: String): Boolean;
    function MakeSCSProjectOnServer(const ClientID: Integer): Boolean;
    function MakeSCSUserProjectOnServer(const aLogonName: String; const aFileName: String): Boolean;
    function MakeReaperTags(const ClientID: Integer; out aProject: String): Boolean;
    function SetTrackerStatus(const TrackerID: Integer; const Status: TGPSTraсkerStatus; const Moment: TDateTime): Boolean;
    function GetTrackersWithRealIMEI(const ClientID: Integer): Variant;
    procedure SetIMEIToTracker(const aTrackerSID: String; const aIMEI: String);
    procedure SetTitleToTracker(const aTrackerSID: String; const aTitle: String);
    function CreateClient(const aClientID: Integer): Integer;
    function CreateTracker(const aClientID: Integer; const aTrackerSID: String; const aTrackerLogin: String; const aProtoSID: String; const aInherit: Boolean): Integer;
  end;

  /// service implemented by TServiceTraccar
  // - you can access this service as such:
  // !var aTraccar: ITraccar;
  // !begin
  // !   aTraccar := TServiceTraccar.Create(aClient);
  // !   // now you can use aTraccar methods
  // !...
  ITraccar = interface(IServiceAbstract)
    ['{BCB1B182-C30F-48C9-9299-432A1F9D8421}']
    function GetUsers(): String;
    function CreateUser(const aUser: TTraccarUser): TTraccarUser;
  end;

  /// implements ITraccar from http://localhost:89/DC/Traccar
  // - this service will run in sicClientDriven mode
  TServiceTraccar = class(TServiceClientAbstractClientDriven,ITraccar)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function GetUsers(): String;
    function CreateUser(const aUser: TTraccarUser): TTraccarUser;
  end;

  /// service implemented by TServiceDCSession
  // - you can access this service as such:
  // !var aDCSession: IDCSession;
  // !begin
  // !   aDCSession := TServiceDCSession.Create(aClient);
  // !   // now you can use aDCSession methods
  // !...
  IDCSession = interface(IServiceAbstract)
    ['{9073D395-66DE-4FFE-B242-D3755E9BA223}']
    function Help(): String;
    function GetDCSessionUserRights(out aUser: ; out aGroup: ): Boolean;
    function GetSessions(): TDCSessionArr;
    procedure SetSessionInfo(const Client: String);
  end;

  /// implements IDCSession from http://localhost:89/DC/DCSession
  // - this service will run in sicClientDriven mode
  TServiceDCSession = class(TServiceClientAbstractClientDriven,IDCSession)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function GetDCSessionUserRights(out aUser: ; out aGroup: ): Boolean;
    function GetSessions(): TDCSessionArr;
    procedure SetSessionInfo(const Client: String);
  end;

  /// service implemented by TServiceTruckingSystem
  // - you can access this service as such:
  // !var aTruckingSystem: ITruckingSystem;
  // !begin
  // !   aTruckingSystem := TServiceTruckingSystem.Create(aClient);
  // !   // now you can use aTruckingSystem methods
  // !...
  ITruckingSystem = interface(IServiceAbstract)
    ['{5E384A7D-C33D-40DA-8CB6-21DEEC9EA27A}']
    function Help(): String;
    function AddClient(const Client: TTruckingClientDTO): Integer;
    function AddTracker(const Tracker: TTruckingTrackerDTO): Integer;
    function GetLocationAddrs(const TrackerIDs: TTrackerIDs): TLocationAddrs;
    function GetLocationsByAddrs(const Addrs: TLocationAddrs): TLocationValues;
    function GetLocations(const TrackerIDs: TTrackerIDs): TLocationValues;
    function GetClients(): TClientsArr;
    function GetUnits(const Client: TID): TUnitArr;
    function GetGroups(const Client: TID): TGroupArr;
    function GetUnitsLocation(const UnitIDArr: TIDDynArray): TLocationsArr;
    function GetUnitsData(const UnitIDArr: TIDDynArray; const Sensors: TRawUTF8DynArray): Variant;
    function GetUnitTrack(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
    function GetUnitReport(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
    function SetUnitSID(const NewSID: String; const Where: String): TID;
    procedure SetUnitSensorValue(const UnitID: Integer; const Sensor: String; const Value: String; const Timestamp: Int64);
    function GetDistanceToGeoZone(const Lat: Double; const Lon: Double; const GisFileName: String; const Where: String): Double;
  end;

  /// implements ITruckingSystem from http://localhost:89/DC/TruckingSystem
  // - this service will run in sicClientDriven mode
  TServiceTruckingSystem = class(TServiceClientAbstractClientDriven,ITruckingSystem)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function Help(): String;
    function AddClient(const Client: TTruckingClientDTO): Integer;
    function AddTracker(const Tracker: TTruckingTrackerDTO): Integer;
    function GetLocationAddrs(const TrackerIDs: TTrackerIDs): TLocationAddrs;
    function GetLocationsByAddrs(const Addrs: TLocationAddrs): TLocationValues;
    function GetLocations(const TrackerIDs: TTrackerIDs): TLocationValues;
    function GetClients(): TClientsArr;
    function GetUnits(const Client: TID): TUnitArr;
    function GetGroups(const Client: TID): TGroupArr;
    function GetUnitsLocation(const UnitIDArr: TIDDynArray): TLocationsArr;
    function GetUnitsData(const UnitIDArr: TIDDynArray; const Sensors: TRawUTF8DynArray): Variant;
    function GetUnitTrack(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
    function GetUnitReport(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
    function SetUnitSID(const NewSID: String; const Where: String): TID;
    procedure SetUnitSensorValue(const UnitID: Integer; const Sensor: String; const Value: String; const Timestamp: Int64);
    function GetDistanceToGeoZone(const Lat: Double; const Lon: Double; const GisFileName: String; const Where: String): Double;
  end;

  /// service implemented by TServiceRecordService
  // - you can access this service as such:
  // !var aRecordService: IRecordService;
  // !begin
  // !   aRecordService := TServiceRecordService.Create(aClient);
  // !   // now you can use aRecordService methods
  // !...
  IRecordService = interface(IServiceAbstract)
    ['{C85CB449-8F13-4F68-9D3E-BADB03C4AEC7}']
    function RecordRefExists(const aTableIndex: Integer; const aID: TID): Boolean;
    function FindRecordReferences(const aTableIndex: Integer; const aID: TID; out RefArr: TLARecordRefArr): Boolean;
  end;

  /// implements IRecordService from http://localhost:89/DC/RecordService
  // - this service will run in sicClientDriven mode
  TServiceRecordService = class(TServiceClientAbstractClientDriven,IRecordService)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    function RecordRefExists(const aTableIndex: Integer; const aID: TID): Boolean;
    function FindRecordReferences(const aTableIndex: Integer; const aID: TID; out RefArr: TLARecordRefArr): Boolean;
  end;

  /// service implemented by TServiceServerManagementService
  // - you can access this service as such:
  // !var aServerManagementService: IServerManagementService;
  // !begin
  // !   aServerManagementService := TServiceServerManagementService.Create(aClient);
  // !   // now you can use aServerManagementService methods
  // !...
  IServerManagementService = interface(IServiceAbstract)
    ['{093D5BC7-8B2A-43B2-9581-B5731B229B7C}']
    procedure StartRemoteLogging(const aServer: String; const aPort: Integer; const aRoot: String);
    procedure StopRemoteLogging();
  end;

  /// implements IServerManagementService from http://localhost:89/DC/ServerManagementService
  // - this service will run in sicClientDriven mode
  TServiceServerManagementService = class(TServiceClientAbstractClientDriven,IServerManagementService)
  public
    constructor Create(aClient: TSQLRestClientURI); override;
    procedure StartRemoteLogging(const aServer: String; const aPort: Integer; const aRoot: String);
    procedure StopRemoteLogging();
  end;

const
  /// the server port, corresponding to http://localhost:89
  SERVER_PORT = 89;
  /// the server model root name, corresponding to http://localhost:89
  SERVER_ROOT = 'DC';


/// return the database Model corresponding to this server
function GetModel(const aRoot: string=SERVER_ROOT): TSQLModel;

/// create a TSQLRestClientHTTP instance and connect to the server
// - it will use by default port 89 over root 'DC', corresponding
// to http://localhost:89/DC
// - secure connection will be established via TSQLRestServerAuthenticationDefault
// with the supplied credentials - on connection or authentication error,
// this function will raise a corresponding exception
function GetClient(const aServerAddress, aUserName,aPassword: string;
  aServerPort: integer=SERVER_PORT; const aServerRoot: string=SERVER_ROOT;
  aHttps: boolean=false): TSQLRestClientHTTP;

// publish some low-level helpers for variant conversion
// - used internally: you should not need those functions in your end-user code
function Variant2TSQLHistoryEvent(const _variant: variant): TSQLHistoryEvent;
function Variant2TDCTagShiftKind(const _variant: variant): TDCTagShiftKind;
function Variant2TDCTagWriteKind(const _variant: variant): TDCTagWriteKind;
function Variant2TMonitoringSensorKind(const _variant: variant): TMonitoringSensorKind;
function Variant2TDCTagUseInReport(const _variant: variant): TDCTagUseInReport;
function Variant2TDCTagUseInTrack(const _variant: variant): TDCTagUseInTrack;
function Variant2TClientStatus(const _variant: variant): TClientStatus;
function Variant2TSCSObjectKind(const _variant: variant): TSCSObjectKind;
function Variant2TSCSObjectIcon(const _variant: variant): TSCSObjectIcon;
function Variant2TGPSTrackerType(const _variant: variant): TGPSTrackerType;
function Variant2TGPSTraсkerStatus(const _variant: variant): TGPSTraсkerStatus;
function Variant2TSimCardStatus(const _variant: variant): TSimCardStatus;
function Variant2TSystemTypes(const _variant: variant): TSystemTypes;
function Variant2TMonitoringDataWriteKind(const _variant: variant): TMonitoringDataWriteKind;
function Variant2TMonitoringSmoothKind(const _variant: variant): TMonitoringSmoothKind;
function Variant2TMonitoringRefValueKind(const _variant: variant): TMonitoringRefValueKind;
function Variant2TRefValueFormat(const _variant: variant): TRefValueFormat;
function Variant2TOVTRecStatus(const _variant: variant): TOVTRecStatus;
function Variant2TTrackerOperation(const _variant: variant): TTrackerOperation;
function Variant2TSCSProjectParams(_variant: variant): TSCSProjectParams;
function TSCSProjectParams2Variant(const _record: TSCSProjectParams): variant;
function Variant2TSensorValueDTO(_variant: variant): TSensorValueDTO;
function TSensorValueDTO2Variant(const _record: TSensorValueDTO): variant;
function Variant2TSensorHistoryRec(_variant: variant): TSensorHistoryRec;
function TSensorHistoryRec2Variant(const _record: TSensorHistoryRec): variant;
function Variant2TDataRec(_variant: variant): TDataRec;
function TDataRec2Variant(const _record: TDataRec): variant;
function Variant2TDataRecExt(_variant: variant): TDataRecExt;
function TDataRecExt2Variant(const _record: TDataRecExt): variant;
function Variant2THistoryRec(_variant: variant): THistoryRec;
function THistoryRec2Variant(const _record: THistoryRec): variant;
function Variant2THistoryRecExt(_variant: variant): THistoryRecExt;
function THistoryRecExt2Variant(const _record: THistoryRecExt): variant;
function Variant2TTrackerParams(_variant: variant): TTrackerParams;
function TTrackerParams2Variant(const _record: TTrackerParams): variant;
function Variant2TRepTableParams(_variant: variant): TRepTableParams;
function TRepTableParams2Variant(const _record: TRepTableParams): variant;
function Variant2TOVRParams(_variant: variant): TOVRParams;
function TOVRParams2Variant(const _record: TOVRParams): variant;
function Variant2TOVRRec(_variant: variant): TOVRRec;
function TOVRRec2Variant(const _record: TOVRRec): variant;
function Variant2TIntervalParams(_variant: variant): TIntervalParams;
function TIntervalParams2Variant(const _record: TIntervalParams): variant;
function Variant2TSCSTrackerActivityRec(_variant: variant): TSCSTrackerActivityRec;
function TSCSTrackerActivityRec2Variant(const _record: TSCSTrackerActivityRec): variant;
function Variant2TSCSClientActivityRec(_variant: variant): TSCSClientActivityRec;
function TSCSClientActivityRec2Variant(const _record: TSCSClientActivityRec): variant;
function Variant2TBillingUserDTO(_variant: variant): TBillingUserDTO;
function TBillingUserDTO2Variant(const _record: TBillingUserDTO): variant;
function Variant2TBillingClientDTO(_variant: variant): TBillingClientDTO;
function TBillingClientDTO2Variant(const _record: TBillingClientDTO): variant;
function Variant2TBillingTrackerDTO(_variant: variant): TBillingTrackerDTO;
function TBillingTrackerDTO2Variant(const _record: TBillingTrackerDTO): variant;
function Variant2TBillingTrackerStatusDTO(_variant: variant): TBillingTrackerStatusDTO;
function TBillingTrackerStatusDTO2Variant(const _record: TBillingTrackerStatusDTO): variant;
function Variant2TBillingSIMCardDTO(_variant: variant): TBillingSIMCardDTO;
function TBillingSIMCardDTO2Variant(const _record: TBillingSIMCardDTO): variant;
function Variant2TAddTrackerParamsDTO(_variant: variant): TAddTrackerParamsDTO;
function TAddTrackerParamsDTO2Variant(const _record: TAddTrackerParamsDTO): variant;
function Variant2TTraccarUser(_variant: variant): TTraccarUser;
function TTraccarUser2Variant(const _record: TTraccarUser): variant;
function Variant2TDCSessionRec(_variant: variant): TDCSessionRec;
function TDCSessionRec2Variant(const _record: TDCSessionRec): variant;
function Variant2TTruckingClientDTO(_variant: variant): TTruckingClientDTO;
function TTruckingClientDTO2Variant(const _record: TTruckingClientDTO): variant;
function Variant2TTruckingTrackerDTO(_variant: variant): TTruckingTrackerDTO;
function TTruckingTrackerDTO2Variant(const _record: TTruckingTrackerDTO): variant;
function Variant2TLocationAddrRec(_variant: variant): TLocationAddrRec;
function TLocationAddrRec2Variant(const _record: TLocationAddrRec): variant;
function Variant2TLocationValueRec(_variant: variant): TLocationValueRec;
function TLocationValueRec2Variant(const _record: TLocationValueRec): variant;
function Variant2TClientDTO(_variant: variant): TClientDTO;
function TClientDTO2Variant(const _record: TClientDTO): variant;
function Variant2TUnitDTO(_variant: variant): TUnitDTO;
function TUnitDTO2Variant(const _record: TUnitDTO): variant;
function Variant2TGroupDTO(_variant: variant): TGroupDTO;
function TGroupDTO2Variant(const _record: TGroupDTO): variant;
function Variant2TLocationDTO(_variant: variant): TLocationDTO;
function TLocationDTO2Variant(const _record: TLocationDTO): variant;
function Variant2TLARecordRefRec(_variant: variant): TLARecordRefRec;
function TLARecordRefRec2Variant(const _record: TLARecordRefRec): variant;
function Variant2TIDs(const _variant: variant): TIDs;
function TIDs2Variant(const _array: TIDs): variant;
function Variant2TSensorDataDTA(const _variant: variant): TSensorDataDTA;
function TSensorDataDTA2Variant(const _array: TSensorDataDTA): variant;
function Variant2TDoubleDynArray(const _variant: variant): TDoubleDynArray;
function TDoubleDynArray2Variant(const _array: TDoubleDynArray): variant;
function Variant2TSensorHistoryArray(const _variant: variant): TSensorHistoryArray;
function TSensorHistoryArray2Variant(const _array: TSensorHistoryArray): variant;
function Variant2TSIDArr(const _variant: variant): TSIDArr;
function TSIDArr2Variant(const _array: TSIDArr): variant;
function Variant2TValArr(const _variant: variant): TValArr;
function TValArr2Variant(const _array: TValArr): variant;
function Variant2TDataRecArr(const _variant: variant): TDataRecArr;
function TDataRecArr2Variant(const _array: TDataRecArr): variant;
function Variant2TDataRecExtArr(const _variant: variant): TDataRecExtArr;
function TDataRecExtArr2Variant(const _array: TDataRecExtArr): variant;
function Variant2TIDArr(const _variant: variant): TIDArr;
function TIDArr2Variant(const _array: TIDArr): variant;
function Variant2THistoryRecArr(const _variant: variant): THistoryRecArr;
function THistoryRecArr2Variant(const _array: THistoryRecArr): variant;
function Variant2THistoryRecExtArr(const _variant: variant): THistoryRecExtArr;
function THistoryRecExtArr2Variant(const _array: THistoryRecExtArr): variant;
function Variant2TIntegerDynArray(const _variant: variant): TIntegerDynArray;
function TIntegerDynArray2Variant(const _array: TIntegerDynArray): variant;
function Variant2TSCSTrackWorkArr(const _variant: variant): TSCSTrackWorkArr;
function TSCSTrackWorkArr2Variant(const _array: TSCSTrackWorkArr): variant;
function Variant2TSCSStopArr(const _variant: variant): TSCSStopArr;
function TSCSStopArr2Variant(const _array: TSCSStopArr): variant;
function Variant2TOVRResult(const _variant: variant): TOVRResult;
function TOVRResult2Variant(const _array: TOVRResult): variant;
function Variant2TSCSTrackLine(const _variant: variant): TSCSTrackLine;
function TSCSTrackLine2Variant(const _array: TSCSTrackLine): variant;
function Variant2TSCSClientActivityArr(const _variant: variant): TSCSClientActivityArr;
function TSCSClientActivityArr2Variant(const _array: TSCSClientActivityArr): variant;
function Variant2TBillingUsersDTO(const _variant: variant): TBillingUsersDTO;
function TBillingUsersDTO2Variant(const _array: TBillingUsersDTO): variant;
function Variant2TBillingClientsDTO(const _variant: variant): TBillingClientsDTO;
function TBillingClientsDTO2Variant(const _array: TBillingClientsDTO): variant;
function Variant2TBillingTrackersDTO(const _variant: variant): TBillingTrackersDTO;
function TBillingTrackersDTO2Variant(const _array: TBillingTrackersDTO): variant;
function Variant2TBillingTrackerStatusHistoryDTO(const _variant: variant): TBillingTrackerStatusHistoryDTO;
function TBillingTrackerStatusHistoryDTO2Variant(const _array: TBillingTrackerStatusHistoryDTO): variant;
function Variant2TBillingSIMCardsDTO(const _variant: variant): TBillingSIMCardsDTO;
function TBillingSIMCardsDTO2Variant(const _array: TBillingSIMCardsDTO): variant;
function Variant2TDCSessionArr(const _variant: variant): TDCSessionArr;
function TDCSessionArr2Variant(const _array: TDCSessionArr): variant;
function Variant2TTrackerIDs(const _variant: variant): TTrackerIDs;
function TTrackerIDs2Variant(const _array: TTrackerIDs): variant;
function Variant2TLocationAddrs(const _variant: variant): TLocationAddrs;
function TLocationAddrs2Variant(const _array: TLocationAddrs): variant;
function Variant2TLocationValues(const _variant: variant): TLocationValues;
function TLocationValues2Variant(const _array: TLocationValues): variant;
function Variant2TClientsArr(const _variant: variant): TClientsArr;
function TClientsArr2Variant(const _array: TClientsArr): variant;
function Variant2TUnitArr(const _variant: variant): TUnitArr;
function TUnitArr2Variant(const _array: TUnitArr): variant;
function Variant2TGroupArr(const _variant: variant): TGroupArr;
function TGroupArr2Variant(const _array: TGroupArr): variant;
function Variant2TIDDynArray(const _variant: variant): TIDDynArray;
function TIDDynArray2Variant(const _array: TIDDynArray): variant;
function Variant2TLocationsArr(const _variant: variant): TLocationsArr;
function TLocationsArr2Variant(const _array: TLocationsArr): variant;
function Variant2TRawUTF8DynArray(const _variant: variant): TRawUTF8DynArray;
function TRawUTF8DynArray2Variant(const _array: TRawUTF8DynArray): variant;
function Variant2TLARecordRefArr(const _variant: variant): TLARecordRefArr;
function TLARecordRefArr2Variant(const _array: TLARecordRefArr): variant;


implementation

{$HINTS OFF} // for H2164 hints of unused variables


{ Some helpers for enumerates types }

function Variant2TSQLHistoryEvent(const _variant: variant): TSQLHistoryEvent;
begin
  result := TSQLHistoryEvent(VariantToEnum(_variant,['heAdd','heUpdate','heDelete','heArchiveBlob']));
end;

function Variant2TDCTagShiftKind(const _variant: variant): TDCTagShiftKind;
begin
  result := TDCTagShiftKind(VariantToEnum(_variant,['tskAbsolute','tskBeginDay','tskBeginWeek','tskBeginMonth','tskBeginYear','tskMoment']));
end;

function Variant2TDCTagWriteKind(const _variant: variant): TDCTagWriteKind;
begin
  result := TDCTagWriteKind(VariantToEnum(_variant,['dlwkNone','dlwkOnCurrentMoment','dlwkOnFuture','dlwkOnMoment']));
end;

function Variant2TMonitoringSensorKind(const _variant: variant): TMonitoringSensorKind;
begin
  result := TMonitoringSensorKind(VariantToEnum(_variant,['Analog','Discrete','CounterUp','CounterDown']));
end;

function Variant2TDCTagUseInReport(const _variant: variant): TDCTagUseInReport;
begin
  result := TDCTagUseInReport(VariantToEnum(_variant,['uirNone','uirSum','uirAverage','uirCount','uirMin','uirMax','uirGroupBy','uirNoReport']));
end;

function Variant2TDCTagUseInTrack(const _variant: variant): TDCTagUseInTrack;
begin
  result := TDCTagUseInTrack(VariantToEnum(_variant,['uitNone','uitSum','uitAverage','uitCount','uitMin','uitMax','uitNoTrack']));
end;

function Variant2TClientStatus(const _variant: variant): TClientStatus;
begin
  result := TClientStatus(VariantToEnum(_variant,['cliUndefined','cliIsActive','cliIsDisabled','cliIsOutOfService']));
end;

function Variant2TSCSObjectKind(const _variant: variant): TSCSObjectKind;
begin
  result := TSCSObjectKind(VariantToEnum(_variant,['Unknown','Moving']));
end;

function Variant2TSCSObjectIcon(const _variant: variant): TSCSObjectIcon;
begin
  result := TSCSObjectIcon(VariantToEnum(_variant,['Group','TractorMTZ','TractorMosey','CombineGrain','CombineTomato','Avto1','Avto2','FuraSandora','AvtoGood','Duckato','Daf','Benzo','Avto3','Field','Pump','Fura1','Avto4','Avto5','AvtoBest','Fura2','Avto6','Dodge','Human']));
end;

function Variant2TGPSTrackerType(const _variant: variant): TGPSTrackerType;
begin
  result := TGPSTrackerType(VariantToEnum(_variant,['trtUndefined','trtTDC','trtTeltonika','trtRoadKey','trtGlobalSat','trtAndroid','trtCicada','trtWialonIPS','trtBCE']));
end;

function Variant2TGPSTraсkerStatus(const _variant: variant): TGPSTraсkerStatus;
begin
  result := TGPSTraсkerStatus(VariantToEnum(_variant,['trsUndefined','trsIsActive','trsIsFrozen','trsIsDisconnected','trsIsOutOfService']));
end;

function Variant2TSimCardStatus(const _variant: variant): TSimCardStatus;
begin
  result := TSimCardStatus(VariantToEnum(_variant,['simUndefined','simIsActive','simIsNotActive','simIsOutOfService','simIsBroken']));
end;

function Variant2TSystemTypes(const _variant: variant): TSystemTypes;
begin
  result := TSystemTypes(VariantToEnum(_variant,['stVirtual','stOPC','stVigo','stPLMS','stModBus','stModBus_NRG','stEnergy','stWeight','stJumo','stRefractometer','stGPRS','stTeltonika','stSNMP','stMetos','stUserData','stGS','stFlowinec','stGPS','stCSVFile','stWIN','stICPDAS','stRPM','stOWEN','stSimpleTracker','stADODB','stModBusTCP','stDC','stColorFlex','stRX5000','stTitrinoPlus848','stZeosDB','stZeos','stRoadKey','stStorozh','stOpenWeatherMap','stCICADA','stXWayTCP','stSERCOM','stAEDTCP','stWialonIPS','stModbusInterception','stRPN','stLinkedGPRS','stColorFlexHID','stBCE']));
end;

function Variant2TMonitoringDataWriteKind(const _variant: variant): TMonitoringDataWriteKind;
begin
  result := TMonitoringDataWriteKind(VariantToEnum(_variant,['mdwkNone','mdwkAverage','mdwkMedian','mdwkMin','mdwkMax','mdwkMeanSquare']));
end;

function Variant2TMonitoringSmoothKind(const _variant: variant): TMonitoringSmoothKind;
begin
  result := TMonitoringSmoothKind(VariantToEnum(_variant,['mskNone','mskMovingMean','mskMedian','mskMin','mskMax','mskMedianMovingMean']));
end;

function Variant2TMonitoringRefValueKind(const _variant: variant): TMonitoringRefValueKind;
begin
  result := TMonitoringRefValueKind(VariantToEnum(_variant,['mrvExact','mrvLeft','mrvRight']));
end;

function Variant2TRefValueFormat(const _variant: variant): TRefValueFormat;
begin
  result := TRefValueFormat(VariantToEnum(_variant,['rvfString','rvfHEX','rvfDEC']));
end;

function Variant2TOVTRecStatus(const _variant: variant): TOVTRecStatus;
begin
  result := TOVTRecStatus(VariantToEnum(_variant,['Visited','NotVisited','NotAtTheRoute']));
end;

function Variant2TTrackerOperation(const _variant: variant): TTrackerOperation;
begin
  result := TTrackerOperation(VariantToEnum(_variant,['Add','Update','Delete']));
end;


{ Some helpers for record types }

function Variant2TSCSProjectParams(_variant: variant): TSCSProjectParams;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ProjectName := _variant.ProjectName;
  result.ExtFL := _variant.ExtFL;
  result.ExtFL1 := _variant.ExtFL1;
  result.ExtFL2 := _variant.ExtFL2;
  result.ExtTime := _variant.ExtTime;
  result.ExtTimeFromLastReceive := _variant.ExtTimeFromLastReceive;
  result.ExtExternalVoltage := _variant.ExtExternalVoltage;
  result.ExtNoConnectionTimeCounter300 := _variant.ExtNoConnectionTimeCounter300;
end;

function TSCSProjectParams2Variant(const _record: TSCSProjectParams): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ProjectName',_record.ProjectName);
  res.SetPath('ExtFL',_record.ExtFL);
  res.SetPath('ExtFL1',_record.ExtFL1);
  res.SetPath('ExtFL2',_record.ExtFL2);
  res.SetPath('ExtTime',_record.ExtTime);
  res.SetPath('ExtTimeFromLastReceive',_record.ExtTimeFromLastReceive);
  res.SetPath('ExtExternalVoltage',_record.ExtExternalVoltage);
  res.SetPath('ExtNoConnectionTimeCounter300',_record.ExtNoConnectionTimeCounter300);
  result := variant(res);
end;

function Variant2TSensorValueDTO(_variant: variant): TSensorValueDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Value := _variant.Value;
  result.ValueStr := _variant.ValueStr;
  result.Moment := Iso8601ToDateTime(_variant.Moment);
  result.Error := _variant.Error;
  result.ErrorMsg := _variant.ErrorMsg;
end;

function TSensorValueDTO2Variant(const _record: TSensorValueDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Value',_record.Value);
  res.SetPath('ValueStr',_record.ValueStr);
  res.SetPath('Moment',DateTimeToIso8601(_record.Moment));
  res.SetPath('Error',_record.Error);
  res.SetPath('ErrorMsg',_record.ErrorMsg);
  result := variant(res);
end;

function Variant2TSensorHistoryRec(_variant: variant): TSensorHistoryRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Moment := Iso8601ToDateTime(_variant.Moment);
  result.Value := _variant.Value;
  result.Error := _variant.Error;
end;

function TSensorHistoryRec2Variant(const _record: TSensorHistoryRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Moment',DateTimeToIso8601(_record.Moment));
  res.SetPath('Value',_record.Value);
  res.SetPath('Error',_record.Error);
  result := variant(res);
end;

function Variant2TDataRec(_variant: variant): TDataRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.t := _variant.t;
  result.v := _variant.v;
end;

function TDataRec2Variant(const _record: TDataRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('t',_record.t);
  res.SetPath('v',_record.v);
  result := variant(res);
end;

function Variant2TDataRecExt(_variant: variant): TDataRecExt;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.SID := _variant.SID;
  result.t := _variant.t;
  result.v := _variant.v;
  result.e := _variant.e;
end;

function TDataRecExt2Variant(const _record: TDataRecExt): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('SID',_record.SID);
  res.SetPath('t',_record.t);
  res.SetPath('v',_record.v);
  res.SetPath('e',_record.e);
  result := variant(res);
end;

function Variant2THistoryRec(_variant: variant): THistoryRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.t := _variant.t;
  result.v := _variant.v;
end;

function THistoryRec2Variant(const _record: THistoryRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('t',_record.t);
  res.SetPath('v',_record.v);
  result := variant(res);
end;

function Variant2THistoryRecExt(_variant: variant): THistoryRecExt;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.t := _variant.t;
  result.v := _variant.v;
  result.e := _variant.e;
end;

function THistoryRecExt2Variant(const _record: THistoryRecExt): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('t',_record.t);
  res.SetPath('v',_record.v);
  res.SetPath('e',_record.e);
  result := variant(res);
end;

function Variant2TTrackerParams(_variant: variant): TTrackerParams;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Name := _variant.Name;
  result.LatID := _variant.LatID;
  result.LonID := _variant.LonID;
  result.SpeedID := _variant.SpeedID;
  result.DistanceID := _variant.DistanceID;
  result.FuelLevelID := _variant.FuelLevelID;
  result.FuelFlowID := _variant.FuelFlowID;
  result.IgnitionID := _variant.IgnitionID;
  result.MinFuelDrainToRep := _variant.MinFuelDrainToRep;
  result.MinRefuelingToRep := _variant.MinRefuelingToRep;
  result.CalcStopExpr := _variant.CalcStopExpr;
end;

function TTrackerParams2Variant(const _record: TTrackerParams): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Name',_record.Name);
  res.SetPath('LatID',_record.LatID);
  res.SetPath('LonID',_record.LonID);
  res.SetPath('SpeedID',_record.SpeedID);
  res.SetPath('DistanceID',_record.DistanceID);
  res.SetPath('FuelLevelID',_record.FuelLevelID);
  res.SetPath('FuelFlowID',_record.FuelFlowID);
  res.SetPath('IgnitionID',_record.IgnitionID);
  res.SetPath('MinFuelDrainToRep',_record.MinFuelDrainToRep);
  res.SetPath('MinRefuelingToRep',_record.MinRefuelingToRep);
  res.SetPath('CalcStopExpr',_record.CalcStopExpr);
  result := variant(res);
end;

function Variant2TRepTableParams(_variant: variant): TRepTableParams;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Date1 := Iso8601ToDateTime(_variant.Date1);
  result.Date2 := Iso8601ToDateTime(_variant.Date2);
  result.Tracker := Variant2TTrackerParams(_variant.Tracker);
  result.GroupeByState := _variant.GroupeByState;
  result.DetailState := _variant.DetailState;
  result.DetailDay := _variant.DetailDay;
  result.DetailHour := _variant.DetailHour;
  result.IgnoreStateSeconds := _variant.IgnoreStateSeconds;
end;

function TRepTableParams2Variant(const _record: TRepTableParams): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Date1',DateTimeToIso8601(_record.Date1));
  res.SetPath('Date2',DateTimeToIso8601(_record.Date2));
  res.SetPath('Tracker',TTrackerParams2Variant(_record.Tracker));
  res.SetPath('GroupeByState',_record.GroupeByState);
  res.SetPath('DetailState',_record.DetailState);
  res.SetPath('DetailDay',_record.DetailDay);
  res.SetPath('DetailHour',_record.DetailHour);
  res.SetPath('IgnoreStateSeconds',_record.IgnoreStateSeconds);
  result := variant(res);
end;

function Variant2TOVRParams(_variant: variant): TOVRParams;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.TrackerSID := _variant.TrackerSID;
  result.Date1 := Iso8601ToDateTime(_variant.Date1);
  result.Date2 := Iso8601ToDateTime(_variant.Date2);
  result.MinDistance := _variant.MinDistance;
  result.MinDuration := _variant.MinDuration;
end;

function TOVRParams2Variant(const _record: TOVRParams): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('TrackerSID',_record.TrackerSID);
  res.SetPath('Date1',DateTimeToIso8601(_record.Date1));
  res.SetPath('Date2',DateTimeToIso8601(_record.Date2));
  res.SetPath('MinDistance',_record.MinDistance);
  res.SetPath('MinDuration',_record.MinDuration);
  result := variant(res);
end;

function Variant2TOVRRec(_variant: variant): TOVRRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Tracker := _variant.Tracker;
  result.Route := _variant.Route;
  result.Outlet := _variant.Outlet;
  result.TimeFrom := Iso8601ToDateTime(_variant.TimeFrom);
  result.TimeTo := Iso8601ToDateTime(_variant.TimeTo);
  result.Duration := _variant.Duration;
  result.Distance := _variant.Distance;
  result.Status := Variant2TOVTRecStatus(_variant.Status);
  result.PlanIndex := _variant.PlanIndex;
  result.FactIndex := _variant.FactIndex;
end;

function TOVRRec2Variant(const _record: TOVRRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Tracker',_record.Tracker);
  res.SetPath('Route',_record.Route);
  res.SetPath('Outlet',_record.Outlet);
  res.SetPath('TimeFrom',DateTimeToIso8601(_record.TimeFrom));
  res.SetPath('TimeTo',DateTimeToIso8601(_record.TimeTo));
  res.SetPath('Duration',_record.Duration);
  res.SetPath('Distance',_record.Distance);
  res.SetPath('Status',ord(_record.Status));
  res.SetPath('PlanIndex',_record.PlanIndex);
  res.SetPath('FactIndex',_record.FactIndex);
  result := variant(res);
end;

function Variant2TIntervalParams(_variant: variant): TIntervalParams;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Date1 := Iso8601ToDateTime(_variant.Date1);
  result.Date2 := Iso8601ToDateTime(_variant.Date2);
end;

function TIntervalParams2Variant(const _record: TIntervalParams): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Date1',DateTimeToIso8601(_record.Date1));
  res.SetPath('Date2',DateTimeToIso8601(_record.Date2));
  result := variant(res);
end;

function Variant2TSCSTrackerActivityRec(_variant: variant): TSCSTrackerActivityRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
  result.Login := _variant.Login;
  result.Phone := _variant.Phone;
  result.MonitoringID := _variant.MonitoringID;
  result.MonitotingSID := _variant.MonitotingSID;
  result.MonitoringTitle := _variant.MonitoringTitle;
  result.Status := _variant.Status;
  result.Activity := _variant.Activity;
  result.LastConnectAt := Iso8601ToDateTime(_variant.LastConnectAt);
end;

function TSCSTrackerActivityRec2Variant(const _record: TSCSTrackerActivityRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  res.SetPath('Login',_record.Login);
  res.SetPath('Phone',_record.Phone);
  res.SetPath('MonitoringID',_record.MonitoringID);
  res.SetPath('MonitotingSID',_record.MonitotingSID);
  res.SetPath('MonitoringTitle',_record.MonitoringTitle);
  res.SetPath('Status',_record.Status);
  res.SetPath('Activity',_record.Activity);
  res.SetPath('LastConnectAt',DateTimeToIso8601(_record.LastConnectAt));
  result := variant(res);
end;

function Variant2TSCSClientActivityRec(_variant: variant): TSCSClientActivityRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
  result.Login := _variant.Login;
  result.MonitoringID := _variant.MonitoringID;
  result.MonitotingSID := _variant.MonitotingSID;
  result.MonitoringTitle := _variant.MonitoringTitle;
  result.Status := _variant.Status;
  result.Activity := _variant.Activity;
  result.LastConnectAt := Iso8601ToDateTime(_variant.LastConnectAt);
  _arr := JSONVariantDataSafe(_variant.Detail,jvArray);
  SetLength(result.Detail,_arr^.Count);
  for _a := 0 to high(result.Detail) do
    result.Detail[_a] := Variant2TSCSTrackerActivityRec(_arr^.Values[_a]);
end;

function TSCSClientActivityRec2Variant(const _record: TSCSClientActivityRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  res.SetPath('Login',_record.Login);
  res.SetPath('MonitoringID',_record.MonitoringID);
  res.SetPath('MonitotingSID',_record.MonitotingSID);
  res.SetPath('MonitoringTitle',_record.MonitoringTitle);
  res.SetPath('Status',_record.Status);
  res.SetPath('Activity',_record.Activity);
  res.SetPath('LastConnectAt',DateTimeToIso8601(_record.LastConnectAt));
  with res.EnsureData('Detail')^ do
    for i := 0 to high(_record.Detail) do
      AddValue(TSCSTrackerActivityRec2Variant(_record.Detail[i]));
  result := variant(res);
end;

function Variant2TBillingUserDTO(_variant: variant): TBillingUserDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.LogonName := _variant.LogonName;
  result.DisplayName := _variant.DisplayName;
end;

function TBillingUserDTO2Variant(const _record: TBillingUserDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('LogonName',_record.LogonName);
  res.SetPath('DisplayName',_record.DisplayName);
  result := variant(res);
end;

function Variant2TBillingClientDTO(_variant: variant): TBillingClientDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
  result.SID := _variant.SID;
  result.Login := _variant.Login;
  result.Status := Variant2TClientStatus(_variant.Status);
end;

function TBillingClientDTO2Variant(const _record: TBillingClientDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  res.SetPath('SID',_record.SID);
  res.SetPath('Login',_record.Login);
  res.SetPath('Status',ord(_record.Status));
  result := variant(res);
end;

function Variant2TBillingTrackerDTO(_variant: variant): TBillingTrackerDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.SID := _variant.SID;
  result.Title := _variant.Title;
  result.ClientID := _variant.ClientID;
  result.Phone := _variant.Phone;
  result.Status := Variant2TGPSTraсkerStatus(_variant.Status);
end;

function TBillingTrackerDTO2Variant(const _record: TBillingTrackerDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('SID',_record.SID);
  res.SetPath('Title',_record.Title);
  res.SetPath('ClientID',_record.ClientID);
  res.SetPath('Phone',_record.Phone);
  res.SetPath('Status',ord(_record.Status));
  result := variant(res);
end;

function Variant2TBillingTrackerStatusDTO(_variant: variant): TBillingTrackerStatusDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Moment := Iso8601ToDateTime(_variant.Moment);
  result.Status := Variant2TGPSTraсkerStatus(_variant.Status);
  result.DocInfo := _variant.DocInfo;
end;

function TBillingTrackerStatusDTO2Variant(const _record: TBillingTrackerStatusDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Moment',DateTimeToIso8601(_record.Moment));
  res.SetPath('Status',ord(_record.Status));
  res.SetPath('DocInfo',_record.DocInfo);
  result := variant(res);
end;

function Variant2TBillingSIMCardDTO(_variant: variant): TBillingSIMCardDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Phone := _variant.Phone;
  result.ICC := _variant.ICC;
  result.MobileOperator := _variant.MobileOperator;
  result.IsAvailableToManage := _variant.IsAvailableToManage;
  result.Status := Variant2TSimCardStatus(_variant.Status);
end;

function TBillingSIMCardDTO2Variant(const _record: TBillingSIMCardDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Phone',_record.Phone);
  res.SetPath('ICC',_record.ICC);
  res.SetPath('MobileOperator',_record.MobileOperator);
  res.SetPath('IsAvailableToManage',_record.IsAvailableToManage);
  res.SetPath('Status',ord(_record.Status));
  result := variant(res);
end;

function Variant2TAddTrackerParamsDTO(_variant: variant): TAddTrackerParamsDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.FTrackerSID := _variant.FTrackerSID;
  result.Operation := Variant2TTrackerOperation(_variant.Operation);
  result.ClientName := _variant.ClientName;
  result.ClientSID := _variant.ClientSID;
  result.TrackerName := _variant.TrackerName;
  result.TrackerType := Variant2TGPSTrackerType(_variant.TrackerType);
  result.TrackerModel := _variant.TrackerModel;
  result.TrackerLogin := _variant.TrackerLogin;
  result.GPS := _variant.GPS;
  result.Ignition := _variant.Ignition;
  result.CAN300 := _variant.CAN300;
  result.FLCount := _variant.FLCount;
  result.DistanceTO := _variant.DistanceTO;
  result.DistanceTrip := _variant.DistanceTrip;
  result.Location := _variant.Location;
  result.LocationFileName := _variant.LocationFileName;
end;

function TAddTrackerParamsDTO2Variant(const _record: TAddTrackerParamsDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('FTrackerSID',_record.FTrackerSID);
  res.SetPath('Operation',ord(_record.Operation));
  res.SetPath('ClientName',_record.ClientName);
  res.SetPath('ClientSID',_record.ClientSID);
  res.SetPath('TrackerName',_record.TrackerName);
  res.SetPath('TrackerType',ord(_record.TrackerType));
  res.SetPath('TrackerModel',_record.TrackerModel);
  res.SetPath('TrackerLogin',_record.TrackerLogin);
  res.SetPath('GPS',_record.GPS);
  res.SetPath('Ignition',_record.Ignition);
  res.SetPath('CAN300',_record.CAN300);
  res.SetPath('FLCount',_record.FLCount);
  res.SetPath('DistanceTO',_record.DistanceTO);
  res.SetPath('DistanceTrip',_record.DistanceTrip);
  res.SetPath('Location',_record.Location);
  res.SetPath('LocationFileName',_record.LocationFileName);
  result := variant(res);
end;

function Variant2TTraccarUser(_variant: variant): TTraccarUser;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.id := _variant.id;
  result.name := _variant.name;
  result.email := _variant.email;
  result.readonly := _variant.readonly;
  result.admin := _variant.admin;
  result.map := _variant.map;
  result.distanceUnit := _variant.distanceUnit;
  result.speedUnit := _variant.speedUnit;
  result.latitude := _variant.latitude;
  result.longitude := _variant.longitude;
  result.zoom := _variant.zoom;
  result.password := _variant.password;
  result.twelveHourFormat := _variant.twelveHourFormat;
  result.coordinateFormat := _variant.coordinateFormat;
  result.disabled := _variant.disabled;
  result.expirationTime := Iso8601ToDateTime(_variant.expirationTime);
  result.deviceLimit := _variant.deviceLimit;
  result.userLimit := _variant.userLimit;
  result.deviceReadonly := _variant.deviceReadonly;
  result.token := _variant.token;
end;

function TTraccarUser2Variant(const _record: TTraccarUser): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('id',_record.id);
  res.SetPath('name',_record.name);
  res.SetPath('email',_record.email);
  res.SetPath('readonly',_record.readonly);
  res.SetPath('admin',_record.admin);
  res.SetPath('map',_record.map);
  res.SetPath('distanceUnit',_record.distanceUnit);
  res.SetPath('speedUnit',_record.speedUnit);
  res.SetPath('latitude',_record.latitude);
  res.SetPath('longitude',_record.longitude);
  res.SetPath('zoom',_record.zoom);
  res.SetPath('password',_record.password);
  res.SetPath('twelveHourFormat',_record.twelveHourFormat);
  res.SetPath('coordinateFormat',_record.coordinateFormat);
  res.SetPath('disabled',_record.disabled);
  res.SetPath('expirationTime',DateTimeToIso8601(_record.expirationTime));
  res.SetPath('deviceLimit',_record.deviceLimit);
  res.SetPath('userLimit',_record.userLimit);
  res.SetPath('deviceReadonly',_record.deviceReadonly);
  res.SetPath('token',_record.token);
  result := variant(res);
end;

function Variant2TDCSessionRec(_variant: variant): TDCSessionRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.UserName := _variant.UserName;
  result.RemoteIP := _variant.RemoteIP;
  result.CreateTime := Iso8601ToDateTime(_variant.CreateTime);
  result.Client := _variant.Client;
end;

function TDCSessionRec2Variant(const _record: TDCSessionRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('UserName',_record.UserName);
  res.SetPath('RemoteIP',_record.RemoteIP);
  res.SetPath('CreateTime',DateTimeToIso8601(_record.CreateTime));
  res.SetPath('Client',_record.Client);
  result := variant(res);
end;

function Variant2TTruckingClientDTO(_variant: variant): TTruckingClientDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Title := _variant.Title;
  result.Info := _variant.Info;
end;

function TTruckingClientDTO2Variant(const _record: TTruckingClientDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Title',_record.Title);
  res.SetPath('Info',_record.Info);
  result := variant(res);
end;

function Variant2TTruckingTrackerDTO(_variant: variant): TTruckingTrackerDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Title := _variant.Title;
  result.TrackerType := Variant2TGPSTrackerType(_variant.TrackerType);
  result.TrackerModel := _variant.TrackerModel;
  result.TrackerLogin := _variant.TrackerLogin;
end;

function TTruckingTrackerDTO2Variant(const _record: TTruckingTrackerDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Title',_record.Title);
  res.SetPath('TrackerType',ord(_record.TrackerType));
  res.SetPath('TrackerModel',_record.TrackerModel);
  res.SetPath('TrackerLogin',_record.TrackerLogin);
  result := variant(res);
end;

function Variant2TLocationAddrRec(_variant: variant): TLocationAddrRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.LatID := _variant.LatID;
  result.LonID := _variant.LonID;
end;

function TLocationAddrRec2Variant(const _record: TLocationAddrRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('LatID',_record.LatID);
  res.SetPath('LonID',_record.LonID);
  result := variant(res);
end;

function Variant2TLocationValueRec(_variant: variant): TLocationValueRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Lat := _variant.Lat;
  result.Lon := _variant.Lon;
  result.Status := _variant.Status;
end;

function TLocationValueRec2Variant(const _record: TLocationValueRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Lat',_record.Lat);
  res.SetPath('Lon',_record.Lon);
  res.SetPath('Status',_record.Status);
  result := variant(res);
end;

function Variant2TClientDTO(_variant: variant): TClientDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
end;

function TClientDTO2Variant(const _record: TClientDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  result := variant(res);
end;

function Variant2TUnitDTO(_variant: variant): TUnitDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
  result.Symbol := _variant.Symbol;
  result.ParentID := _variant.ParentID;
end;

function TUnitDTO2Variant(const _record: TUnitDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  res.SetPath('Symbol',_record.Symbol);
  res.SetPath('ParentID',_record.ParentID);
  result := variant(res);
end;

function Variant2TGroupDTO(_variant: variant): TGroupDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.ID := _variant.ID;
  result.Title := _variant.Title;
  result.ParentID := _variant.ParentID;
end;

function TGroupDTO2Variant(const _record: TGroupDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('ID',_record.ID);
  res.SetPath('Title',_record.Title);
  res.SetPath('ParentID',_record.ParentID);
  result := variant(res);
end;

function Variant2TLocationDTO(_variant: variant): TLocationDTO;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.Lat := _variant.Lat;
  result.Lon := _variant.Lon;
  result.Speed := _variant.Speed;
  result.Status := _variant.Status;
end;

function TLocationDTO2Variant(const _record: TLocationDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('Lat',_record.Lat);
  res.SetPath('Lon',_record.Lon);
  res.SetPath('Speed',_record.Speed);
  res.SetPath('Status',_record.Status);
  result := variant(res);
end;

function Variant2TLARecordRefRec(_variant: variant): TLARecordRefRec;
var _a: integer;
    _arr: PJSONVariantData;
begin
  result.TableName := _variant.TableName;
  result.TableIndex := _variant.TableIndex;
  result.RecordID := _variant.RecordID;
  result.RecordTitle := _variant.RecordTitle;
end;

function TLARecordRefRec2Variant(const _record: TLARecordRefRec): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  res.SetPath('TableName',_record.TableName);
  res.SetPath('TableIndex',_record.TableIndex);
  res.SetPath('RecordID',_record.RecordID);
  res.SetPath('RecordTitle',_record.RecordTitle);
  result := variant(res);
end;


{ Some helpers for dynamic array types }

function Variant2TIDs(const _variant: variant): TIDs;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TIDs2Variant(const _array: TIDs): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TSensorDataDTA(const _variant: variant): TSensorDataDTA;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSensorValueDTO(arr^.Values[i]);
end;

function TSensorDataDTA2Variant(const _array: TSensorDataDTA): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSensorValueDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TDoubleDynArray(const _variant: variant): TDoubleDynArray;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TDoubleDynArray2Variant(const _array: TDoubleDynArray): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TSensorHistoryArray(const _variant: variant): TSensorHistoryArray;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSensorHistoryRec(arr^.Values[i]);
end;

function TSensorHistoryArray2Variant(const _array: TSensorHistoryArray): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSensorHistoryRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TSIDArr(const _variant: variant): TSIDArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TSIDArr2Variant(const _array: TSIDArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TValArr(const _variant: variant): TValArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TValArr2Variant(const _array: TValArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TDataRecArr(const _variant: variant): TDataRecArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TDataRec(arr^.Values[i]);
end;

function TDataRecArr2Variant(const _array: TDataRecArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TDataRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TDataRecExtArr(const _variant: variant): TDataRecExtArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TDataRecExt(arr^.Values[i]);
end;

function TDataRecExtArr2Variant(const _array: TDataRecExtArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TDataRecExt2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TIDArr(const _variant: variant): TIDArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TIDArr2Variant(const _array: TIDArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2THistoryRecArr(const _variant: variant): THistoryRecArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2THistoryRec(arr^.Values[i]);
end;

function THistoryRecArr2Variant(const _array: THistoryRecArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(THistoryRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2THistoryRecExtArr(const _variant: variant): THistoryRecExtArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2THistoryRecExt(arr^.Values[i]);
end;

function THistoryRecExtArr2Variant(const _array: THistoryRecExtArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(THistoryRecExt2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TIntegerDynArray(const _variant: variant): TIntegerDynArray;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TIntegerDynArray2Variant(const _array: TIntegerDynArray): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TSCSTrackWorkArr(const _variant: variant): TSCSTrackWorkArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSCSTrackWorkRec(arr^.Values[i]);
end;

function TSCSTrackWorkArr2Variant(const _array: TSCSTrackWorkArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSCSTrackWorkRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TSCSStopArr(const _variant: variant): TSCSStopArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSCSStopRec(arr^.Values[i]);
end;

function TSCSStopArr2Variant(const _array: TSCSStopArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSCSStopRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TOVRResult(const _variant: variant): TOVRResult;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TOVRRec(arr^.Values[i]);
end;

function TOVRResult2Variant(const _array: TOVRResult): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TOVRRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TSCSTrackLine(const _variant: variant): TSCSTrackLine;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSCSLatLonRec(arr^.Values[i]);
end;

function TSCSTrackLine2Variant(const _array: TSCSTrackLine): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSCSLatLonRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TSCSClientActivityArr(const _variant: variant): TSCSClientActivityArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TSCSClientActivityRec(arr^.Values[i]);
end;

function TSCSClientActivityArr2Variant(const _array: TSCSClientActivityArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TSCSClientActivityRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TBillingUsersDTO(const _variant: variant): TBillingUsersDTO;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TBillingUserDTO(arr^.Values[i]);
end;

function TBillingUsersDTO2Variant(const _array: TBillingUsersDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TBillingUserDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TBillingClientsDTO(const _variant: variant): TBillingClientsDTO;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TBillingClientDTO(arr^.Values[i]);
end;

function TBillingClientsDTO2Variant(const _array: TBillingClientsDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TBillingClientDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TBillingTrackersDTO(const _variant: variant): TBillingTrackersDTO;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TBillingTrackerDTO(arr^.Values[i]);
end;

function TBillingTrackersDTO2Variant(const _array: TBillingTrackersDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TBillingTrackerDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TBillingTrackerStatusHistoryDTO(const _variant: variant): TBillingTrackerStatusHistoryDTO;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TBillingTrackerStatusDTO(arr^.Values[i]);
end;

function TBillingTrackerStatusHistoryDTO2Variant(const _array: TBillingTrackerStatusHistoryDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TBillingTrackerStatusDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TBillingSIMCardsDTO(const _variant: variant): TBillingSIMCardsDTO;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TBillingSIMCardDTO(arr^.Values[i]);
end;

function TBillingSIMCardsDTO2Variant(const _array: TBillingSIMCardsDTO): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TBillingSIMCardDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TDCSessionArr(const _variant: variant): TDCSessionArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TDCSessionRec(arr^.Values[i]);
end;

function TDCSessionArr2Variant(const _array: TDCSessionArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TDCSessionRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TTrackerIDs(const _variant: variant): TTrackerIDs;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TTrackerIDs2Variant(const _array: TTrackerIDs): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TLocationAddrs(const _variant: variant): TLocationAddrs;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TLocationAddrRec(arr^.Values[i]);
end;

function TLocationAddrs2Variant(const _array: TLocationAddrs): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TLocationAddrRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TLocationValues(const _variant: variant): TLocationValues;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TLocationValueRec(arr^.Values[i]);
end;

function TLocationValues2Variant(const _array: TLocationValues): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TLocationValueRec2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TClientsArr(const _variant: variant): TClientsArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TClientDTO(arr^.Values[i]);
end;

function TClientsArr2Variant(const _array: TClientsArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TClientDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TUnitArr(const _variant: variant): TUnitArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TUnitDTO(arr^.Values[i]);
end;

function TUnitArr2Variant(const _array: TUnitArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TUnitDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TGroupArr(const _variant: variant): TGroupArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TGroupDTO(arr^.Values[i]);
end;

function TGroupArr2Variant(const _array: TGroupArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TGroupDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TIDDynArray(const _variant: variant): TIDDynArray;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TIDDynArray2Variant(const _array: TIDDynArray): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TLocationsArr(const _variant: variant): TLocationsArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TLocationDTO(arr^.Values[i]);
end;

function TLocationsArr2Variant(const _array: TLocationsArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TLocationDTO2Variant(_array[i]));
  result := variant(res);
end;

function Variant2TRawUTF8DynArray(const _variant: variant): TRawUTF8DynArray;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := (arr^.Values[i]);
end;

function TRawUTF8DynArray2Variant(const _array: TRawUTF8DynArray): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue((_array[i]));
  result := variant(res);
end;

function Variant2TLARecordRefArr(const _variant: variant): TLARecordRefArr;
var i: integer;
    arr: PJSONVariantData;
begin
  arr := JSONVariantDataSafe(_variant,jvArray);
  SetLength(result,arr^.Count);
  for i := 0 to arr^.Count-1 do
    result[i] := Variant2TLARecordRefRec(arr^.Values[i]);
end;

function TLARecordRefArr2Variant(const _array: TLARecordRefArr): variant;
var i: integer;
    res: TJSONVariantData;
begin
  res.Init;
  for i := 0 to high(_array) do
    res.AddValue(TLARecordRefRec2Variant(_array[i]));
  result := variant(res);
end;


{$HINTS ON} // for H2164 hints of unused variables

function GetModel(const aRoot: string): TSQLModel;
begin
  result := TSQLModel.Create([TSQLDCRecordHistory,TSQLRecordTableDeleted,TSQLDCInfo,TSQLDCModel,TSQLDCStorage,TSQLDCAuthUser,TSQLDCAuthGroup,TSQLDCRole,TSQLDCUserRoles,TSQLDCConnection,TSQLDCTag,TSQLDCTagGroup,TSQLDCTagPrototype,TSQLClient,TSQLSCSObject,TSQLSCSGroup,TSQLGPSTracker,TSQLGPSTrackerGroup,TSQLSimCard,TSQLSCSProjectTemplate,TSQLWEBProjectTemplate,TSQLDCTask,TSQLMonitoringSystemControl,TSQLMonitoringSystemControlGroup,TSQLMonitoringUser,TSQLMonitoringRole,TSQLMonitoringUserRole,TSQLMonitoringSyncServer,TSQLMonitoringUserSyncServer,TSQLMonitoringObjecType,TSQLMonitoringObjectPermission,TSQLMonitoringConnection,TSQLMonitoringDeviceGroup,TSQLMonitoringDevice,TSQLMonitoringObjectKind,TSQLMonitoringGroup,TSQLMonitoringSensorUnit,TSQLMonitoringSensor,TSQLProjectOperation,TSQLProject,TSQLProjectGroup,TSQLProjectVersion,TSQLProjectOperationLog,TSQLClientGroup],aRoot);
end;

function GetClient(const aServerAddress, aUserName,aPassword: string;
  aServerPort: integer; const aServerRoot: string; aHttps: boolean): TSQLRestClientHTTP;
begin
  result := TSQLRestClientHTTP.Create(aServerAddress,aServerPort,
    GetModel(aServerRoot),true,aHttps); // aOwnModel=true
  try
    if (not result.Connect) or (result.ServerTimeStamp=0) then
      raise ERestException.CreateFmt('Impossible to connect to %s:%d server',
        [aServerAddress,aServerPort]);
    if not result.SetUser(TSQLRestServerAuthenticationDefault,aUserName,aPassword) then 
      raise ERestException.CreateFmt('%s:%d server rejected "%s" credentials',
        [aServerAddress,aServerPort,aUserName]);
  except
    result.Free;
    raise;
  end;
end;


{ TServiceViewData }

constructor TServiceViewData.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'ViewData';
  fServiceURI := 'ViewData';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '03480768BCE3675A';
  inherited Create(aClient);
end;

function TServiceViewData.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceViewData.GetSensorData(const ID: String): TSensorValueDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSensorData',1, // raise EServiceException on error
    [ID],res);
  Result := Variant2TSensorValueDTO(res[0]);
end;

function TServiceViewData.GetSensorsData(const IDs: TIDs): TSensorDataDTA;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSensorsData',1, // raise EServiceException on error
    [TIDs2Variant(IDs)],res);
  Result := Variant2TSensorDataDTA(res[0]);
end;

function TServiceViewData.GetSensorValue(const ID: String): Double;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSensorValue',1, // raise EServiceException on error
    [ID],res);
  Result := res[0];
end;

function TServiceViewData.GetSensorsValues(const IDs: TIDs): TDoubleDynArray;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSensorsValues',1, // raise EServiceException on error
    [TIDs2Variant(IDs)],res);
  Result := Variant2TDoubleDynArray(res[0]);
end;

function TServiceViewData.GetSensorHistory(const ID: String; const Date1: String; const Date2: String): TSensorHistoryArray;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSensorHistory',1, // raise EServiceException on error
    [ID,Date1,Date2],res);
  Result := Variant2TSensorHistoryArray(res[0]);
end;

function TServiceViewData.CalcCounter(const ID: String; const Date1: String; const Date2: String): Double;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CalcCounter',1, // raise EServiceException on error
    [ID,Date1,Date2],res);
  Result := res[0];
end;


{ TServiceMonitoring }

constructor TServiceMonitoring.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'Monitoring';
  fServiceURI := 'Monitoring';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := 'DC99A2840C161E9B';
  inherited Create(aClient);
end;

function TServiceMonitoring.DateTimeToMoment(const aDateTime: TDateTime): Int64;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'DateTimeToMoment',1, // raise EServiceException on error
    [DateTimeToIso8601(aDateTime)],res);
  Result := res[0];
end;

function TServiceMonitoring.MomentToDateTime(const aMoment: Int64): TDateTime;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MomentToDateTime',1, // raise EServiceException on error
    [aMoment],res);
  Result := Iso8601ToDateTime(res[0]);
end;

function TServiceMonitoring.SensorValue(const SID: String): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorValue',1, // raise EServiceException on error
    [SID],res);
  Result := res[0];
end;

function TServiceMonitoring.SensorData(const SID: String): TDataRec;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorData',1, // raise EServiceException on error
    [SID],res);
  Result := Variant2TDataRec(res[0]);
end;

function TServiceMonitoring.SensorDataExt(const SID: String): TDataRecExt;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorDataExt',1, // raise EServiceException on error
    [SID],res);
  Result := Variant2TDataRecExt(res[0]);
end;

function TServiceMonitoring.GroupSensorValue(const SIDs: TSIDArr): TValArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorValue',1, // raise EServiceException on error
    [TSIDArr2Variant(SIDs)],res);
  Result := Variant2TValArr(res[0]);
end;

function TServiceMonitoring.GroupSensorData(const SIDs: TSIDArr): TDataRecArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorData',1, // raise EServiceException on error
    [TSIDArr2Variant(SIDs)],res);
  Result := Variant2TDataRecArr(res[0]);
end;

function TServiceMonitoring.GroupSensorDataExt(const SIDs: TSIDArr): TDataRecExtArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorDataExt',1, // raise EServiceException on error
    [TSIDArr2Variant(SIDs)],res);
  Result := Variant2TDataRecExtArr(res[0]);
end;

function TServiceMonitoring.SensorValueByID(const ID: TID): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorValueByID',1, // raise EServiceException on error
    [ID],res);
  Result := res[0];
end;

function TServiceMonitoring.SensorDataByID(const ID: TID): TDataRec;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorDataByID',1, // raise EServiceException on error
    [ID],res);
  Result := Variant2TDataRec(res[0]);
end;

function TServiceMonitoring.SensorDataExtByID(const ID: TID): TDataRecExt;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorDataExtByID',1, // raise EServiceException on error
    [ID],res);
  Result := Variant2TDataRecExt(res[0]);
end;

function TServiceMonitoring.GroupSensorValueByID(const IDs: TIDArr): TValArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorValueByID',1, // raise EServiceException on error
    [TIDArr2Variant(IDs)],res);
  Result := Variant2TValArr(res[0]);
end;

function TServiceMonitoring.GroupSensorDataByID(const IDs: TIDArr): TDataRecArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorDataByID',1, // raise EServiceException on error
    [TIDArr2Variant(IDs)],res);
  Result := Variant2TDataRecArr(res[0]);
end;

function TServiceMonitoring.GroupSensorDataExtByID(const IDs: TIDArr): TDataRecExtArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GroupSensorDataExtByID',1, // raise EServiceException on error
    [TIDArr2Variant(IDs)],res);
  Result := Variant2TDataRecExtArr(res[0]);
end;

function TServiceMonitoring.SensorDataAsText(const SID: String): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorDataAsText',1, // raise EServiceException on error
    [SID],res);
  Result := res[0];
end;

function TServiceMonitoring.SensorsDataAsText(const SIDs: TSIDArr): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorsDataAsText',1, // raise EServiceException on error
    [TSIDArr2Variant(SIDs)],res);
  Result := res[0];
end;

function TServiceMonitoring.SensorHistory(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorHistory',1, // raise EServiceException on error
    [SID,FromDate,ToDate],res);
  Result := Variant2THistoryRecArr(res[0]);
end;

function TServiceMonitoring.SensorHistoryExt(const SID: String; const FromDate: Int64; const ToDate: Int64): THistoryRecExtArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SensorHistoryExt',1, // raise EServiceException on error
    [SID,FromDate,ToDate],res);
  Result := Variant2THistoryRecExtArr(res[0]);
end;

function TServiceMonitoring.CloneGroup(const aGroupID: TID; const aCloneChildren: Boolean; const aCloneSensors: Boolean; const aCloneDevices: Boolean; const aCount: Integer): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CloneGroup',1, // raise EServiceException on error
    [aGroupID,aCloneChildren,aCloneSensors,aCloneDevices,aCount],res);
  Result := res[0];
end;

procedure TServiceMonitoring.InitSensorsByID(const IDs: TIntegerDynArray);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'InitSensorsByID',0, // raise EServiceException on error
    [TIntegerDynArray2Variant(IDs)],res);
end;

procedure TServiceMonitoring.InitGroupsByID(const IDs: TIntegerDynArray);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'InitGroupsByID',0, // raise EServiceException on error
    [TIntegerDynArray2Variant(IDs)],res);
end;

procedure TServiceMonitoring.InitDevicesByID(const IDs: TIntegerDynArray);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'InitDevicesByID',0, // raise EServiceException on error
    [TIntegerDynArray2Variant(IDs)],res);
end;


{ TServiceSCSReport }

constructor TServiceSCSReport.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'SCSReport';
  fServiceURI := 'SCSReport';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := 'D8D831F9CBBF536C';
  inherited Create(aClient);
end;

function TServiceSCSReport.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceSCSReport.GetTrackWorkRep(var Params: TRepTableParams): TSCSTrackWorkArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetTrackWorkRep',2, // raise EServiceException on error
    [TRepTableParams2Variant(Params)],res);
  Params := Variant2TRepTableParams(res[0]);
  Result := Variant2TSCSTrackWorkArr(res[1]);
end;

function TServiceSCSReport.GetStops(var Params: TRepTableParams): TSCSStopArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetStops',2, // raise EServiceException on error
    [TRepTableParams2Variant(Params)],res);
  Params := Variant2TRepTableParams(res[0]);
  Result := Variant2TSCSStopArr(res[1]);
end;

function TServiceSCSReport.OutletVisitReport(const Params: TOVRParams): TOVRResult;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'OutletVisitReport',1, // raise EServiceException on error
    [TOVRParams2Variant(Params)],res);
  Result := Variant2TOVRResult(res[0]);
end;

function TServiceSCSReport.FullReport(const TrackerSID: String; const Date1: TDateTime; const Date2: TDateTime): Variant;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'FullReport',1, // raise EServiceException on error
    [TrackerSID,DateTimeToIso8601(Date1),DateTimeToIso8601(Date2)],res);
  Result := res[0];
end;

function TServiceSCSReport.GetTrack(const Tracker: TTrackerParams; const Interval: TIntervalParams): TSCSTrackLine;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetTrack',1, // raise EServiceException on error
    [TTrackerParams2Variant(Tracker),TIntervalParams2Variant(Interval)],res);
  Result := Variant2TSCSTrackLine(res[0]);
end;

function TServiceSCSReport.CalcClientActivity(const ClientID: Integer; const Date1: String; const Date2: String): TSCSClientActivityArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CalcClientActivity',1, // raise EServiceException on error
    [ClientID,Date1,Date2],res);
  Result := Variant2TSCSClientActivityArr(res[0]);
end;


{ TServiceDCControl }

constructor TServiceDCControl.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'DCControl';
  fServiceURI := 'DCControl';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '5085FC997112A224';
  inherited Create(aClient);
end;

function TServiceDCControl.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceDCControl.TurnOffUser(const aUser: String; const aMessage: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOffUser',1, // raise EServiceException on error
    [aUser,aMessage],res);
  Result := res[0];
end;

function TServiceDCControl.TurnOnUser(const aUser: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOnUser',1, // raise EServiceException on error
    [aUser],res);
  Result := res[0];
end;

function TServiceDCControl.GetDCSessionUser(out aUser: ): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetDCSessionUser',2, // raise EServiceException on error
    [],res);
  aUser.Free; // avoid memory leak
  aUser := .CreateFromVariant(res[0]);
  Result := res[1];
end;

function TServiceDCControl.UseSession(): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'UseSession',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceDCControl.RenameLookup(const aFrom: String; const aTo: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'RenameLookup',1, // raise EServiceException on error
    [aFrom,aTo],res);
  Result := res[0];
end;

function TServiceDCControl.ReinitPrototypes(): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'ReinitPrototypes',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;


{ TServiceImportModelData }

constructor TServiceImportModelData.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'ImportModelData';
  fServiceURI := 'ImportModelData';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '5A78E8479765FED6';
  inherited Create(aClient);
end;

function TServiceImportModelData.ImportProjectFromSCP(const aClientID: Integer; const aProject: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'ImportProjectFromSCP',1, // raise EServiceException on error
    [aClientID,aProject],res);
  Result := res[0];
end;


{ TServiceBillingSystem }

constructor TServiceBillingSystem.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'BillingSystem';
  fServiceURI := 'BillingSystem';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '8EFF721E87538D6C';
  inherited Create(aClient);
end;

function TServiceBillingSystem.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

procedure TServiceBillingSystem.TestException();
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TestException',0, // raise EServiceException on error
    [],res);
end;

function TServiceBillingSystem.GetUsers(): TBillingUsersDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUsers',1, // raise EServiceException on error
    [],res);
  Result := Variant2TBillingUsersDTO(res[0]);
end;

function TServiceBillingSystem.AddUser(const LogonName: String): TBillingUserDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddUser',1, // raise EServiceException on error
    [LogonName],res);
  Result := Variant2TBillingUserDTO(res[0]);
end;

function TServiceBillingSystem.GetClients(): TBillingClientsDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetClients',1, // raise EServiceException on error
    [],res);
  Result := Variant2TBillingClientsDTO(res[0]);
end;

function TServiceBillingSystem.GetUserClients(const UserLogonName: String): TBillingClientsDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUserClients',1, // raise EServiceException on error
    [UserLogonName],res);
  Result := Variant2TBillingClientsDTO(res[0]);
end;

function TServiceBillingSystem.AddClient(const ClientName: String): TBillingClientDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddClient',1, // raise EServiceException on error
    [ClientName],res);
  Result := Variant2TBillingClientDTO(res[0]);
end;

function TServiceBillingSystem.UpdateClientTitle(const ClientID: Integer; const ClientName: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'UpdateClientTitle',1, // raise EServiceException on error
    [ClientID,ClientName],res);
  Result := res[0];
end;

function TServiceBillingSystem.GetClientTrackers(const ClientID: Integer): TBillingTrackersDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetClientTrackers',1, // raise EServiceException on error
    [ClientID],res);
  Result := Variant2TBillingTrackersDTO(res[0]);
end;

function TServiceBillingSystem.GetTrackerStatusHistory(const TrackerID: Integer): TBillingTrackerStatusHistoryDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetTrackerStatusHistory',1, // raise EServiceException on error
    [TrackerID],res);
  Result := Variant2TBillingTrackerStatusHistoryDTO(res[0]);
end;

function TServiceBillingSystem.TurnOffTracker(const TrackerID: Integer; const Freeze: Boolean): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOffTracker',1, // raise EServiceException on error
    [TrackerID,Freeze],res);
  Result := res[0];
end;

function TServiceBillingSystem.TurnOnTracker(const TrackerID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOnTracker',1, // raise EServiceException on error
    [TrackerID],res);
  Result := res[0];
end;

function TServiceBillingSystem.DisableClient(const ClientID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'DisableClient',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceBillingSystem.EnableClient(const ClientID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'EnableClient',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceBillingSystem.TurnOnClient(const ClientID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOnClient',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceBillingSystem.TurnOffClient(const ClientID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'TurnOffClient',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceBillingSystem.GetSIMCards(): TBillingSIMCardsDTO;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSIMCards',1, // raise EServiceException on error
    [],res);
  Result := Variant2TBillingSIMCardsDTO(res[0]);
end;

function TServiceBillingSystem.SetSIMCards(const Cards: TBillingSIMCardsDTO): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetSIMCards',1, // raise EServiceException on error
    [TBillingSIMCardsDTO2Variant(Cards)],res);
  Result := res[0];
end;


{ TServiceSCSSystem }

constructor TServiceSCSSystem.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'SCSSystem';
  fServiceURI := 'SCSSystem';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '861AAF546B24133F';
  inherited Create(aClient);
end;

function TServiceSCSSystem.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceSCSSystem.GetTrackerTagsFromMonitoring(const ConnectionID: Integer; const TrackerAddr: String; const Params: TSCSProjectParams; out Tags: ): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetTrackerTagsFromMonitoring',2, // raise EServiceException on error
    [ConnectionID,TrackerAddr,TSCSProjectParams2Variant(Params)],res);
  Tags.Free; // avoid memory leak
  Tags := .CreateFromVariant(res[0]);
  Result := res[1];
end;

function TServiceSCSSystem.UpdateTrackerTagsFromMonitoring(const TrackerID: Integer; const Params: TSCSProjectParams): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'UpdateTrackerTagsFromMonitoring',1, // raise EServiceException on error
    [TrackerID,TSCSProjectParams2Variant(Params)],res);
  Result := res[0];
end;

function TServiceSCSSystem.AddClientTrackersFromMonitoring(const ClientID: Integer; const SID: String): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddClientTrackersFromMonitoring',1, // raise EServiceException on error
    [ClientID,SID],res);
  Result := res[0];
end;

function TServiceSCSSystem.GetNewTrackerName(const ClientID: Integer): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetNewTrackerName',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceSCSSystem.AddOrUpdateTrackerInMonitoring(const ConnectionID: Integer; const Params: TAddTrackerParamsDTO): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddOrUpdateTrackerInMonitoring',1, // raise EServiceException on error
    [ConnectionID,TAddTrackerParamsDTO2Variant(Params)],res);
  Result := res[0];
end;

function TServiceSCSSystem.AddOrUpdateTracker(const ClientID: Integer; var Params: TAddTrackerParamsDTO): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddOrUpdateTracker',2, // raise EServiceException on error
    [ClientID,TAddTrackerParamsDTO2Variant(Params)],res);
  Params := Variant2TAddTrackerParamsDTO(res[0]);
  Result := res[1];
end;

function TServiceSCSSystem.MakeSCSProject(const ClientID: Integer; out aProject: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MakeSCSProject',2, // raise EServiceException on error
    [ClientID],res);
  aProject := res[0];
  Result := res[1];
end;

function TServiceSCSSystem.MakeSCSUserProject(const aLogonName: String; out aProject: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MakeSCSUserProject',2, // raise EServiceException on error
    [aLogonName],res);
  aProject := res[0];
  Result := res[1];
end;

function TServiceSCSSystem.MakeSCSProjectOnServer(const ClientID: Integer): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MakeSCSProjectOnServer',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

function TServiceSCSSystem.MakeSCSUserProjectOnServer(const aLogonName: String; const aFileName: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MakeSCSUserProjectOnServer',1, // raise EServiceException on error
    [aLogonName,aFileName],res);
  Result := res[0];
end;

function TServiceSCSSystem.MakeReaperTags(const ClientID: Integer; out aProject: String): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'MakeReaperTags',2, // raise EServiceException on error
    [ClientID],res);
  aProject := res[0];
  Result := res[1];
end;

function TServiceSCSSystem.SetTrackerStatus(const TrackerID: Integer; const Status: TGPSTraсkerStatus; const Moment: TDateTime): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetTrackerStatus',1, // raise EServiceException on error
    [TrackerID,ord(Status),DateTimeToIso8601(Moment)],res);
  Result := res[0];
end;

function TServiceSCSSystem.GetTrackersWithRealIMEI(const ClientID: Integer): Variant;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetTrackersWithRealIMEI',1, // raise EServiceException on error
    [ClientID],res);
  Result := res[0];
end;

procedure TServiceSCSSystem.SetIMEIToTracker(const aTrackerSID: String; const aIMEI: String);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetIMEIToTracker',0, // raise EServiceException on error
    [aTrackerSID,aIMEI],res);
end;

procedure TServiceSCSSystem.SetTitleToTracker(const aTrackerSID: String; const aTitle: String);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetTitleToTracker',0, // raise EServiceException on error
    [aTrackerSID,aTitle],res);
end;

function TServiceSCSSystem.CreateClient(const aClientID: Integer): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CreateClient',1, // raise EServiceException on error
    [aClientID],res);
  Result := res[0];
end;

function TServiceSCSSystem.CreateTracker(const aClientID: Integer; const aTrackerSID: String; const aTrackerLogin: String; const aProtoSID: String; const aInherit: Boolean): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CreateTracker',1, // raise EServiceException on error
    [aClientID,aTrackerSID,aTrackerLogin,aProtoSID,aInherit],res);
  Result := res[0];
end;


{ TServiceTraccar }

constructor TServiceTraccar.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'Traccar';
  fServiceURI := 'Traccar';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := 'D245AD3917DC2B54';
  inherited Create(aClient);
end;

function TServiceTraccar.GetUsers(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUsers',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceTraccar.CreateUser(const aUser: TTraccarUser): TTraccarUser;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'CreateUser',1, // raise EServiceException on error
    [TTraccarUser2Variant(aUser)],res);
  Result := Variant2TTraccarUser(res[0]);
end;


{ TServiceDCSession }

constructor TServiceDCSession.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'DCSession';
  fServiceURI := 'DCSession';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '49237C319C65EA85';
  inherited Create(aClient);
end;

function TServiceDCSession.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceDCSession.GetDCSessionUserRights(out aUser: ; out aGroup: ): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetDCSessionUserRights',3, // raise EServiceException on error
    [],res);
  aUser.Free; // avoid memory leak
  aUser := .CreateFromVariant(res[0]);
  aGroup.Free; // avoid memory leak
  aGroup := .CreateFromVariant(res[1]);
  Result := res[2];
end;

function TServiceDCSession.GetSessions(): TDCSessionArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetSessions',1, // raise EServiceException on error
    [],res);
  Result := Variant2TDCSessionArr(res[0]);
end;

procedure TServiceDCSession.SetSessionInfo(const Client: String);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetSessionInfo',0, // raise EServiceException on error
    [Client],res);
end;


{ TServiceTruckingSystem }

constructor TServiceTruckingSystem.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'TruckingSystem';
  fServiceURI := 'TruckingSystem';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '2440CC5DC67EFCB4';
  inherited Create(aClient);
end;

function TServiceTruckingSystem.Help(): String;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'Help',1, // raise EServiceException on error
    [],res);
  Result := res[0];
end;

function TServiceTruckingSystem.AddClient(const Client: TTruckingClientDTO): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddClient',1, // raise EServiceException on error
    [TTruckingClientDTO2Variant(Client)],res);
  Result := res[0];
end;

function TServiceTruckingSystem.AddTracker(const Tracker: TTruckingTrackerDTO): Integer;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'AddTracker',1, // raise EServiceException on error
    [TTruckingTrackerDTO2Variant(Tracker)],res);
  Result := res[0];
end;

function TServiceTruckingSystem.GetLocationAddrs(const TrackerIDs: TTrackerIDs): TLocationAddrs;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetLocationAddrs',1, // raise EServiceException on error
    [TTrackerIDs2Variant(TrackerIDs)],res);
  Result := Variant2TLocationAddrs(res[0]);
end;

function TServiceTruckingSystem.GetLocationsByAddrs(const Addrs: TLocationAddrs): TLocationValues;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetLocationsByAddrs',1, // raise EServiceException on error
    [TLocationAddrs2Variant(Addrs)],res);
  Result := Variant2TLocationValues(res[0]);
end;

function TServiceTruckingSystem.GetLocations(const TrackerIDs: TTrackerIDs): TLocationValues;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetLocations',1, // raise EServiceException on error
    [TTrackerIDs2Variant(TrackerIDs)],res);
  Result := Variant2TLocationValues(res[0]);
end;

function TServiceTruckingSystem.GetClients(): TClientsArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetClients',1, // raise EServiceException on error
    [],res);
  Result := Variant2TClientsArr(res[0]);
end;

function TServiceTruckingSystem.GetUnits(const Client: TID): TUnitArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUnits',1, // raise EServiceException on error
    [Client],res);
  Result := Variant2TUnitArr(res[0]);
end;

function TServiceTruckingSystem.GetGroups(const Client: TID): TGroupArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetGroups',1, // raise EServiceException on error
    [Client],res);
  Result := Variant2TGroupArr(res[0]);
end;

function TServiceTruckingSystem.GetUnitsLocation(const UnitIDArr: TIDDynArray): TLocationsArr;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUnitsLocation',1, // raise EServiceException on error
    [TIDDynArray2Variant(UnitIDArr)],res);
  Result := Variant2TLocationsArr(res[0]);
end;

function TServiceTruckingSystem.GetUnitsData(const UnitIDArr: TIDDynArray; const Sensors: TRawUTF8DynArray): Variant;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUnitsData',1, // raise EServiceException on error
    [TIDDynArray2Variant(UnitIDArr),TRawUTF8DynArray2Variant(Sensors)],res);
  Result := res[0];
end;

function TServiceTruckingSystem.GetUnitTrack(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUnitTrack',1, // raise EServiceException on error
    [UnitID,Date1,Date2],res);
  Result := res[0];
end;

function TServiceTruckingSystem.GetUnitReport(const UnitID: TID; const Date1: Int64; const Date2: Int64): Variant;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetUnitReport',1, // raise EServiceException on error
    [UnitID,Date1,Date2],res);
  Result := res[0];
end;

function TServiceTruckingSystem.SetUnitSID(const NewSID: String; const Where: String): TID;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetUnitSID',1, // raise EServiceException on error
    [NewSID,Where],res);
  Result := res[0];
end;

procedure TServiceTruckingSystem.SetUnitSensorValue(const UnitID: Integer; const Sensor: String; const Value: String; const Timestamp: Int64);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'SetUnitSensorValue',0, // raise EServiceException on error
    [UnitID,Sensor,Value,Timestamp],res);
end;

function TServiceTruckingSystem.GetDistanceToGeoZone(const Lat: Double; const Lon: Double; const GisFileName: String; const Where: String): Double;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'GetDistanceToGeoZone',1, // raise EServiceException on error
    [Lat,Lon,GisFileName,Where],res);
  Result := res[0];
end;


{ TServiceRecordService }

constructor TServiceRecordService.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'RecordService';
  fServiceURI := 'RecordService';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := 'CA5B14AA217D062A';
  inherited Create(aClient);
end;

function TServiceRecordService.RecordRefExists(const aTableIndex: Integer; const aID: TID): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'RecordRefExists',1, // raise EServiceException on error
    [aTableIndex,aID],res);
  Result := res[0];
end;

function TServiceRecordService.FindRecordReferences(const aTableIndex: Integer; const aID: TID; out RefArr: TLARecordRefArr): Boolean;
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'FindRecordReferences',2, // raise EServiceException on error
    [aTableIndex,aID],res);
  RefArr := Variant2TLARecordRefArr(res[0]);
  Result := res[1];
end;


{ TServiceServerManagementService }

constructor TServiceServerManagementService.Create(aClient: TSQLRestClientURI);
begin
  fServiceName := 'ServerManagementService';
  fServiceURI := 'ServerManagementService';
  fInstanceImplementation := sicClientDriven;
  fContractExpected := '94FE32558321383A';
  inherited Create(aClient);
end;

procedure TServiceServerManagementService.StartRemoteLogging(const aServer: String; const aPort: Integer; const aRoot: String);
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'StartRemoteLogging',0, // raise EServiceException on error
    [aServer,aPort,aRoot],res);
end;

procedure TServiceServerManagementService.StopRemoteLogging();
var res: TVariantDynArray;
begin
  fClient.CallRemoteService(self,'StopRemoteLogging',0, // raise EServiceException on error
    [],res);
end;


end.